<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GC on devbins blog</title>
    <link>http://devbins.github.io/tags/gc/</link>
    <description>Recent content in GC on devbins blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 13 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://devbins.github.io/tags/gc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 垃圾回收机制</title>
      <link>http://devbins.github.io/post/gc/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/gc/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;之前我们介绍了 JVM 运行时内存是怎么分配的，其中方法区和堆是线程共享的，这里的对象如果不需要使用了，需要释放掉。&lt;/p&gt;&#xA;&lt;p&gt;但我们很少像 C/C++ 一样去自己管理，释放内存，这其中就要归功于 &lt;code&gt;Java GC&lt;/code&gt; ，它在背后默默的工作着。&lt;/p&gt;&#xA;&lt;p&gt;虽然 &lt;code&gt;Java GC&lt;/code&gt; 在背后默默的工作着，但是我们一直都不了解它，今天来看看它是怎么工作的，这样出现问题了才有应对之法。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
