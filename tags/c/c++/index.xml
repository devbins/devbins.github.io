<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on devbins blog</title>
    <link>http://localhost:1313/tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on devbins blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 28 May 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C语言字符串\0的截断陷阱</title>
      <link>http://localhost:1313/post/cstring/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/cstring/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;字符串在 C 语言中是一种常见的数据类型，以字符数组的形式存储。而 C 语言中的字符串以 &lt;code&gt;\0&lt;/code&gt; （空字符）作为结束符。然而， &lt;code&gt;\0&lt;/code&gt; 的存在可能导致一些问题，特别是在处理包含 &lt;code&gt;\0&lt;/code&gt; 的字符串时，常见的字符串处理函数可能会出现截断的情况。&lt;/p&gt;&#xA;&lt;p&gt;最近就在字符串上踩了坑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HOOK C/C&#43;&#43;内存泄漏</title>
      <link>http://localhost:1313/post/c_hook/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/c_hook/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;之前有介绍过使用宏来检测 &lt;code&gt;C/C++&lt;/code&gt; 中内存泄漏的情况，这种方案有一个缺点是只能检测自己写的代码，不能检测第三方库。&lt;/p&gt;&#xA;&lt;p&gt;并且所有用到内存分配和释放的地方都需要修改代码，修改的成本还挺高的，并且容易漏掉。&lt;/p&gt;&#xA;&lt;p&gt;今天就来介绍一种比较彻底的方案，使用 &lt;code&gt;hook&lt;/code&gt; 来检测内存的分配和释放。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C/C&#43;&#43; 内存泄漏检测</title>
      <link>http://localhost:1313/post/c_mem_leak/</link>
      <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/c_mem_leak/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在上一篇文章中我们讲了&lt;a href=&#34;http://localhost:1313/post/leakcanary/&#34;&gt;使用LeakCanary 内存泄漏检测的原理&lt;/a&gt;，但是它只能检测 &lt;code&gt;Java&lt;/code&gt; 层的泄漏，对 &lt;code&gt;C/C++&lt;/code&gt; 并没有办法。&lt;/p&gt;&#xA;&lt;p&gt;所以这篇文章来聊一聊如何检测 &lt;code&gt;C/C++&lt;/code&gt; 内存泄漏。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C/C&#43;&#43; 包依赖管理</title>
      <link>http://localhost:1313/post/conan/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/conan/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在开发过程中，我们难免会使用到第三方库，在 &lt;code&gt;C/C++&lt;/code&gt; 中使用第三库都是把源码下载下来，然后进行编译。&lt;/p&gt;&#xA;&lt;p&gt;在多人协作的时候，每个人都需要在自己的电脑上编译一遍，非常的麻烦，编译时间也会随着库的增加不断增加。&lt;/p&gt;&#xA;&lt;p&gt;其它语言也有这个问题，它们有包管理工具来管理这些依赖，比如 &lt;code&gt;Java&lt;/code&gt; 的 &lt;code&gt;Maven&lt;/code&gt; 、 &lt;code&gt;Gradle&lt;/code&gt; ， &lt;code&gt;Rust&lt;/code&gt; 的 &lt;code&gt;cargo&lt;/code&gt; ， &lt;code&gt;Python&lt;/code&gt; 的 &lt;code&gt;pip&lt;/code&gt; ， &lt;code&gt;Node&lt;/code&gt; 的 &lt;code&gt;npm&lt;/code&gt; 、 &lt;code&gt;yarn&lt;/code&gt; 等，使用起来非常方便。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;C/C++&lt;/code&gt; 在包依赖管理工具上一直没有一个较好的，不过还是有一些工具的，我们今天要介绍的就是 &lt;code&gt;JFrog&lt;/code&gt; 推出的 &lt;code&gt;Conan&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 ccls 预处理 C/C&#43;&#43;</title>
      <link>http://localhost:1313/post/cclspre/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/cclspre/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://devbins.github.io/post/rtags/&#34;&gt;使用 RTags 预处理 C/C++&lt;/a&gt;中，我介绍了使用 &lt;code&gt;RTags&lt;/code&gt; 来进行预处理，然后在实践中发现了另外一个工具也可以做到，那就是 &lt;code&gt;ccls&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;今天就来介绍在 &lt;code&gt;ccls&lt;/code&gt; 如何查看预处理之后的代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CMake基础</title>
      <link>http://localhost:1313/post/cmake/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/cmake/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;自从 &lt;code&gt;AndroidStudio2.2&lt;/code&gt; 开始支持 &lt;code&gt;CMAKE&lt;/code&gt; 来构建 &lt;code&gt;C/C++&lt;/code&gt; 程序之后，作为 &lt;code&gt;Android&lt;/code&gt; 开发就可以使用 &lt;code&gt;CMake&lt;/code&gt; 来替换 &lt;code&gt;Android.mk&lt;/code&gt; 了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本使用&#34;&gt;基本使用&lt;/h2&gt;&#xA;&lt;p&gt;在学习 &lt;code&gt;CMAKE&lt;/code&gt; 之前，我们先来看一下如何使用 &lt;code&gt;CMAKE&lt;/code&gt; 编译项目。假设 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 已经编写完毕，并且是正确的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用ccls作为C/C&#43;&#43;的补全方案</title>
      <link>http://localhost:1313/post/ccls/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/ccls/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;最近使用 &lt;code&gt;C/C++&lt;/code&gt; 开发，在 &lt;code&gt;Emacs&lt;/code&gt; 下使用 &lt;code&gt;Cmake&lt;/code&gt; 作为编译工具，结合 &lt;code&gt;ccls&lt;/code&gt; 进行代码补全，有着不错的体验，于是记录一下。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
