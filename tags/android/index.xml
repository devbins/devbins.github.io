<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on devbins blog</title>
    <link>http://localhost:1313/tags/android/</link>
    <description>Recent content in Android on devbins blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 15 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 GKD 跳过开屏广告</title>
      <link>http://localhost:1313/post/gkd/</link>
      <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/gkd/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;每次打开应用都要等待几秒的广告，有些跳过还不好点，容易误触，今天教你使用 GKD 自动跳过广告。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KernelSU</title>
      <link>http://localhost:1313/post/kernelsu/</link>
      <pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/kernelsu/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;上一篇文章讲了解锁 bootloader，那么解锁后的第一件事就是 root，今天就来讲下使用 KernelSU 作为 root 方案。&lt;/p&gt;&#xA;&lt;p&gt;以小米手机为例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>小米手机解锁 bootloader</title>
      <link>http://localhost:1313/post/%E5%B0%8F%E7%B1%B3%E8%A7%A3%E9%94%81bootloader/</link>
      <pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/%E5%B0%8F%E7%B1%B3%E8%A7%A3%E9%94%81bootloader/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;有一部 root 过的手机，在进行抓包，定位问题会方便不少，所以有必要搞一台 root 过的手机。&lt;/p&gt;&#xA;&lt;p&gt;我手上有一台小米的手机，root 之前需要解 bootloader。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android Studio 通过二维码使用WIFI连接手机原理分析</title>
      <link>http://localhost:1313/post/qrcode_pair/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/qrcode_pair/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;由于开发需要，下了最新版的 &lt;code&gt;Android Studio(Dolphin)&lt;/code&gt; ，发现在选择 &lt;code&gt;Android&lt;/code&gt; 设备的时候多了一个 &lt;code&gt;Pair Devices Using WI-FI&lt;/code&gt; ，然后这里可以使用二维码和配对码，我使用了二维码进行配对，发现挺方便的，可以不用数据线了。&lt;/p&gt;&#xA;&lt;p&gt;本文会分析一下实现的过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeakCanary 内存泄漏检测原理</title>
      <link>http://localhost:1313/post/leakcanary/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/leakcanary/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;内存泄漏是一个开发不得不面对的问题，在 Android 中有许多工具都可以用来检测内存泄漏，比如：MAT、Profile等。&lt;/p&gt;&#xA;&lt;p&gt;但是这些工具都需要手动操作，比较麻烦，所以我们需要一个能够自动检测的工具，它就是&lt;a href=&#34;https://square.github.io/leakcanary/&#34;&gt;LeakCanary&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;今天就来了解一下原理，毕竟面试也是常问的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust For Android</title>
      <link>http://localhost:1313/post/rust_android/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/rust_android/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;继上一篇&lt;a href=&#34;https://devbins.github.io/post/rust%5Fios/&#34;&gt;用 Rust 开发 iOS&lt;/a&gt; 开发折腾之后，我又折腾起 &lt;code&gt;Android&lt;/code&gt; 了。&lt;/p&gt;&#xA;&lt;p&gt;最开始我是先从 &lt;code&gt;Android&lt;/code&gt; 上下手的，不过一直没成功，直到最近才成功了。&lt;/p&gt;&#xA;&lt;p&gt;本文默认你已经把 &lt;code&gt;Rust&lt;/code&gt; 安装好了。注意需要使用 &lt;code&gt;stable&lt;/code&gt;  &lt;code&gt;channel&lt;/code&gt; ，我之前使用的是 &lt;code&gt;nightly&lt;/code&gt; 所以一直失败。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;nightly channel&lt;/code&gt; 会报 &lt;code&gt;dl_iterate_phdr can&#39;t find&lt;/code&gt; 错误，这个错误一直误导了我，我一直以为是链接上的问题，所以折腾了很久。&lt;/p&gt;&#xA;&lt;p&gt;直到我换了一台电脑试了一下，居然成功了，才发现使用的 &lt;code&gt;channel&lt;/code&gt; 是不一样的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JNI中的引用</title>
      <link>http://localhost:1313/post/jni%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/jni%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;平时写 &lt;code&gt;Java&lt;/code&gt; 代码对创建的对象，我们很少会去关心怎么手动释放内存，大多数时候都有 &lt;code&gt;GC&lt;/code&gt; 去帮我们回收。&lt;/p&gt;&#xA;&lt;p&gt;然而在 &lt;code&gt;JNI&lt;/code&gt; 中，几乎都是 &lt;code&gt;C/C++&lt;/code&gt; 的代码，它们是没有 &lt;code&gt;GC&lt;/code&gt; 的，所以对内存的使用就需要格外小心了。&lt;/p&gt;&#xA;&lt;p&gt;因此在 &lt;code&gt;JNI&lt;/code&gt; 中提供了三种引用类型，分别是局部引用、全局引用、弱全局引用。下面介绍这三种引用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zygote 是怎么使用 LocalSocket 进行进程间通信的</title>
      <link>http://localhost:1313/post/localsocket/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/localsocket/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;本文基于 &lt;code&gt;Android10&lt;/code&gt; ，分析 &lt;code&gt;Zygote&lt;/code&gt; 与 &lt;code&gt;AMS&lt;/code&gt; 是如何使用 &lt;code&gt;LocalSocket&lt;/code&gt; 建立连接的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android中管道的使用</title>
      <link>http://localhost:1313/post/pipe/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/pipe/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;最近读了一些 &lt;code&gt;Android&lt;/code&gt; 源码，发现其中不少是用 &lt;code&gt;pipe&lt;/code&gt; 机制来实现的，并且和我们往常使用 &lt;code&gt;pipe&lt;/code&gt;  有些不一样。&lt;/p&gt;&#xA;&lt;p&gt;有必要学习一下 &lt;code&gt;pipe&lt;/code&gt; 的使用，不然会影响阅读源码，并且 &lt;code&gt;Android&lt;/code&gt; 里的使用方式比较有技巧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MPAndroidChart 使用总结</title>
      <link>http://localhost:1313/post/mpandroidchart/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/mpandroidchart/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;今年开工以来，一直接触图表相关的开发，经过选择最后采用 &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; ，期间碰到了一些问题，踩了不少坑。特来总结一下，以免日后忘记。这些知识点虽然不难，但是非常零碎，找起来比较麻烦。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用Docker下载AOSP源码</title>
      <link>http://localhost:1313/post/aosp/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/aosp/</guid>
      <description>&lt;h2 id=&#34;aosp-介绍&#34;&gt;AOSP 介绍&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;AOSP&lt;/code&gt; 是 Android 开放源码项目，通俗点就是整个 &lt;code&gt;Android&lt;/code&gt; 的源码。有了 &lt;code&gt;AOSP&lt;/code&gt; 我们就可以在源码的层面去了解整个 &lt;code&gt;Android&lt;/code&gt; 系统。甚至可以自己基于 &lt;code&gt;AOSP&lt;/code&gt; 去定制自己系统，这也是众多 &lt;code&gt;ROM&lt;/code&gt; 的直接或间接起源。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RxLifecycle 原理解析</title>
      <link>http://localhost:1313/post/rxlifecycle/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/rxlifecycle/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;从名字中可以看出 &lt;code&gt;RxLifecycle&lt;/code&gt; 和生命周期有关。也的确如此， &lt;code&gt;RxLifecycle&lt;/code&gt; 通过监听生命周期的变化，来解决 &lt;code&gt;RxJava&lt;/code&gt; 内存泄漏的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在 Docker 中用 Jenkins 搭建 Android 自动化打包</title>
      <link>http://localhost:1313/post/jenkins/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/jenkins/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Jenkins 是一个持续集成的工具，帮你构建和打包自动化，不用手动做这些操作。构建完成后可以帮你上传到第三方测试平台，或者做其他一些操作。例如：发送邮件通知测试人员可以开始测试了，邮件中包含下载地址，或者二维码。整个流程不需要手动管理，非常高效。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
