<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on devbins blog</title>
    <link>http://devbins.github.io/tags/java/</link>
    <description>Recent content in Java on devbins blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Sep 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://devbins.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JNI: HashMap&lt;-&gt;unordered_map</title>
      <link>http://devbins.github.io/post/jni_map/</link>
      <pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jni_map/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在进行 &lt;code&gt;JNI&lt;/code&gt; 开发的时候，经常会碰到需要传递 &lt;code&gt;Map&lt;/code&gt; 的需求。&lt;/p&gt;&#xA;&lt;p&gt;它们实现起来不难，但是写起来还是比较麻烦的，每次要写的时候都要老半天。&lt;/p&gt;&#xA;&lt;p&gt;所以这里给一个参考，希望在用到的时候能帮你进行快速开发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>性能提高之JNI 缓存</title>
      <link>http://devbins.github.io/post/jnicache/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jnicache/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在 &lt;code&gt;JNI&lt;/code&gt; 中如果需要调用 &lt;code&gt;Java&lt;/code&gt; 的方法，首先需要使用 &lt;code&gt;FindClass&lt;/code&gt; 获取到 &lt;code&gt;jclass&lt;/code&gt; ，然后使用 &lt;code&gt;GetMethodID&lt;/code&gt; 获取到对应方法的 &lt;code&gt;ID&lt;/code&gt; ，字段也是一样的要使用 &lt;code&gt;GetFieldID&lt;/code&gt; 来获取。&lt;/p&gt;&#xA;&lt;p&gt;如果每次都要查找一遍，是比较麻烦和耗时的，今天就来研究一下怎么把它们缓存起来以提高性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JNI 局部引用释放</title>
      <link>http://devbins.github.io/post/jniref/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jniref/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;有过 &lt;code&gt;JNI&lt;/code&gt; 开发经历的都知道，在创建局部引用之后要释放。可是我们经常却直接返回 &lt;code&gt;env-&amp;gt;NewStringUTF(&amp;quot;&amp;quot;)&lt;/code&gt; 到 &lt;code&gt;Java&lt;/code&gt; 没有释放，并且不会有问题，本文就来研究一下局部引用的释放问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java 内存模型</title>
      <link>http://devbins.github.io/post/jmm/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jmm/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;今天来学一下 &lt;code&gt;Java&lt;/code&gt; 内存模型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cpu-工作模型&#34;&gt;CPU 工作模型&lt;/h2&gt;&#xA;&lt;p&gt;在学 &lt;code&gt;Java&lt;/code&gt; 内存模型之前，我们来了解一下 &lt;code&gt;CPU&lt;/code&gt; 的工作模型。&lt;/p&gt;&#xA;&lt;p&gt;现代计算机中的 &lt;code&gt;CPU&lt;/code&gt; 的执行速度远高于内存的读取速度， &lt;code&gt;CPU&lt;/code&gt; 每读取一次都要都要等待老半天，这样 &lt;code&gt;CPU&lt;/code&gt; 就会有大量的时间在等待，而浪费了 &lt;code&gt;CPU&lt;/code&gt; 的计算能力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java 类的加载过程</title>
      <link>http://devbins.github.io/post/classloader1/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/classloader1/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;上次说到了类的加载器，分为 &lt;code&gt;BootstrapClassLoader&lt;/code&gt; 、 &lt;code&gt;ExtClassLoader&lt;/code&gt; 、 &lt;code&gt;AppClassLoader&lt;/code&gt; 。具体是怎么加载的没说，这次来说一说类的加载过程，主要分为装载、链接、初始化。其中链接又可以分为验证、准备、解析。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ClassLoader</title>
      <link>http://devbins.github.io/post/classloader/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/classloader/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;上一篇我们了解了字节码的结构，这些字节码文件都是什么时候被加载到内存中的，今天就来聊聊类加载。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Class 探秘</title>
      <link>http://devbins.github.io/post/class/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/class/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Java&lt;/code&gt; 开发都知道 &lt;code&gt;.java&lt;/code&gt; 文件编译后得到的是 &lt;code&gt;.class&lt;/code&gt; 文件，这个文件是 &lt;code&gt;Java&lt;/code&gt; 虚拟机能够识别加载的文件。有了这个字节码文件 &lt;code&gt;Java&lt;/code&gt; 实现一次编写到处运行才成为可能。&lt;/p&gt;&#xA;&lt;p&gt;然而我们平时都是写 &lt;code&gt;.java&lt;/code&gt; 文件，很少接触 &lt;code&gt;.class&lt;/code&gt; 文件，今天就来看看 &lt;code&gt;.class&lt;/code&gt; 文件中有什么秘密，它长什么样子。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java 垃圾回收机制</title>
      <link>http://devbins.github.io/post/gc/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/gc/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;之前我们介绍了 JVM 运行时内存是怎么分配的，其中方法区和堆是线程共享的，这里的对象如果不需要使用了，需要释放掉。&lt;/p&gt;&#xA;&lt;p&gt;但我们很少像 C/C++ 一样去自己管理，释放内存，这其中就要归功于 &lt;code&gt;Java GC&lt;/code&gt; ，它在背后默默的工作着。&lt;/p&gt;&#xA;&lt;p&gt;虽然 &lt;code&gt;Java GC&lt;/code&gt; 在背后默默的工作着，但是我们一直都不了解它，今天来看看它是怎么工作的，这样出现问题了才有应对之法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JVM 运行时内存分配</title>
      <link>http://devbins.github.io/post/jvm/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jvm/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt; 是 &lt;code&gt;Java&lt;/code&gt; 程序员绕不过去的坎，今天学习下 &lt;code&gt;Java&lt;/code&gt; 虚拟机运行时是怎么分配内存的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt; 规范中规定， &lt;code&gt;JVM&lt;/code&gt; 运行时内存分为程序计数器、虚拟机栈、本地方法栈、方法区、堆，这5个部分，如下图所示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>单例模式的多种写法</title>
      <link>http://devbins.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;单例模式介绍&#34;&gt;单例模式介绍&lt;/h2&gt;&#xA;&lt;p&gt;单例模式算是平常用的比较多的，而且也比较简单的模式之一。单例模式的作用就是保证在程序中只有一个实例存在。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
