<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on devbins blog</title>
    <link>http://devbins.github.io/tags/git/</link>
    <description>Recent content in git on devbins blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 12 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://devbins.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Emacs中使用Forge管理GitHub Pull Request</title>
      <link>http://devbins.github.io/post/forge/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/forge/</guid>
      <description>前言 本文会描述如何在 Emacs 中使用 Forge 来管理 GitHub Pull Request 。 配置 在使用之前需要先对 Forge 进行配置，主要有两步，分别是设置 GitHub 用户名和配置 GitHub Access Token 设置GitHub用户</description>
    </item>
    
    <item>
      <title>Magit 使用技巧</title>
      <link>http://devbins.github.io/post/magit/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/magit/</guid>
      <description>&lt;h2 id=&#34;magit-介绍&#34;&gt;Magit 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Magit&lt;/code&gt; 是 &lt;code&gt;Emacs&lt;/code&gt; 中的一个用于管理 &lt;code&gt;Git&lt;/code&gt; 的工具，可以理解为 &lt;code&gt;Git&lt;/code&gt; 的前端操作界面。和 &lt;code&gt;SourceTree&lt;/code&gt; 客户端类似，不过功能却强大太多了，这也是我使用 &lt;code&gt;Emacs&lt;/code&gt; 的一个重要理由。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Magit&lt;/code&gt; 中有许多非常强大的功能，这里介绍几个非常有用，但是又不容易记住的。&lt;/p&gt;
&lt;p&gt;本文的 &lt;code&gt;Magit&lt;/code&gt; 所使用的快捷键需要配合 &lt;code&gt;evil-mode&lt;/code&gt; 使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows 下的 Git 自带 GPG</title>
      <link>http://devbins.github.io/post/gitgpg/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gitgpg/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;由于工作需要，需要使用 &lt;code&gt;Windows&lt;/code&gt; ，在 &lt;code&gt;Windows&lt;/code&gt; 中开发始终没有那么方便。最近在用 &lt;code&gt;Git&lt;/code&gt; 提交代码时想用 &lt;code&gt;GPG&lt;/code&gt; 进行签名，于是就下载了 &lt;a href=&#34;https://www.gpg4win.org/&#34;&gt;Gpg4win&lt;/a&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Emacs 中使用 Git Flow</title>
      <link>http://devbins.github.io/post/gitflow/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gitflow/</guid>
      <description>&lt;h2 id=&#34;git-flow-简介&#34;&gt;Git Flow 简介&lt;/h2&gt;
&lt;p&gt;随着 &lt;code&gt;GitHub&lt;/code&gt; 的流行，越来越多人开始使用 &lt;code&gt;Git&lt;/code&gt; ， &lt;code&gt;Git&lt;/code&gt; 的强大在于我们可以随时随地的创建分支。&lt;/p&gt;
&lt;p&gt;随时随地创建分支，给我带来了极大的方便，但同时，分支太多管理起来也是非常头疼。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt; 支持多人协作，如果没有一个规范的话，随着时间的变化，将会越来越难以管理。&lt;/p&gt;
&lt;p&gt;这时 &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;Git Flow&lt;/a&gt; 出现了，这个分支模型，为我们管理 &lt;code&gt;Git&lt;/code&gt; 分支提供了一个模型，用来管理 &lt;code&gt;Git&lt;/code&gt; 分支，有效的减少分支混乱不堪的情况。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
