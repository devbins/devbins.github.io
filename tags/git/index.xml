<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on devbins blog</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in Git on devbins blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>手把手教学：如何在本地快速 Review别人的PR？</title>
      <link>http://localhost:1313/post/github_pr/</link>
      <pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/github_pr/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;今天分享如何在本地 Review 别人的 Pull Request(以下简称PR)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>压缩 Git 仓库</title>
      <link>http://localhost:1313/post/%E5%8E%8B%E7%BC%A9git%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/%E5%8E%8B%E7%BC%A9git%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;有时候我们需要把项目的源代码发给别人，但是直接压缩会把一些编译产生的中间文件，缓存等等都压缩进去。&lt;/p&gt;&#xA;&lt;p&gt;这就会导致压缩包很大，并且这些文件其实也没有必要。&lt;/p&gt;&#xA;&lt;p&gt;还有一种情况是有些文件比较敏感不应该压缩进去，就需要过滤掉。&lt;/p&gt;&#xA;&lt;p&gt;如果每次都这么干，那么流程就会很漫长。&lt;/p&gt;&#xA;&lt;p&gt;虽然添加过滤可以解决这些问题，但是都挺麻烦的，我经过一番实验发现了一个极为简单的方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 清理 fetch 失败占用的磁盘空间</title>
      <link>http://localhost:1313/post/git_prune/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/git_prune/</guid>
      <description>&lt;p&gt;最近在下载 &lt;code&gt;chromium&lt;/code&gt; 源码，下载完之后需要切换到指定的分支，这时候使用 &lt;code&gt;git fetch&lt;/code&gt; 进行切换，但是不是一次就能成功。&lt;/p&gt;&#xA;&lt;p&gt;所以需要不断执行 &lt;code&gt;git fetch&lt;/code&gt; ，但是随着执行的次数增多，我发现磁盘的空间却越来越少。&lt;/p&gt;&#xA;&lt;p&gt;也就是 &lt;code&gt;git fetch&lt;/code&gt; 失败后占用了磁盘空间并没有释放。&lt;/p&gt;&#xA;&lt;p&gt;在查找资料后发现使用 &lt;code&gt;git prune&lt;/code&gt; 可以解决这个问题。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;git prune&lt;/code&gt; 会删除没有使用的 &lt;code&gt;hash&lt;/code&gt; 文件，由于我们这边 &lt;code&gt;fetch&lt;/code&gt; 失败了，所以这些文件是没有使用的。&lt;/p&gt;&#xA;&lt;p&gt;执行之后磁盘瞬间释放70G空间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Forge管理GitHub Issue</title>
      <link>http://localhost:1313/post/forge_issue/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/forge_issue/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://devbins.github.io/post/forge/&#34;&gt;Emacs中使用Forge管理GitHub Pull Request&lt;/a&gt;中，我聊到了在 &lt;code&gt;Emacs&lt;/code&gt; 中使用 &lt;code&gt;Forge&lt;/code&gt; 管理 &lt;code&gt;GitHub Pull Request&lt;/code&gt; ，今天来讲一讲怎么管理 &lt;code&gt;GitHub Issue&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;&#xA;&lt;p&gt;使用之前需要配置 &lt;code&gt;GitHub&lt;/code&gt; 相关信息，在&lt;a href=&#34;https://devbins.github.io/post/forge/&#34;&gt;Emacs中使用Forge管理GitHub Pull Request&lt;/a&gt;中有说过，不了解的可以前往查看，这里不再赘述。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs中使用Forge管理GitHub Pull Request</title>
      <link>http://localhost:1313/post/forge/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/forge/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;GitHub&lt;/code&gt; 与其他开发者合作需要频繁的创建 &lt;code&gt;Pull Request&lt;/code&gt; 或者 Review 别人提交的 &lt;code&gt;Pull Request&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;自从我使用 &lt;code&gt;Emacs&lt;/code&gt; 来管理 &lt;code&gt;Git&lt;/code&gt; 仓库后一直用的很舒服，但是这也仅限于自己的仓库。创建 &lt;code&gt;Pull Reqeust&lt;/code&gt; 也是用的网页，这样的操作体验就不一致了，需要在 &lt;code&gt;Emacs&lt;/code&gt; 和浏览器来回切换。&lt;/p&gt;&#xA;&lt;p&gt;于是我搜索一圈发现在 &lt;code&gt;Emacs&lt;/code&gt; 里可以使用 &lt;code&gt;Forge&lt;/code&gt; 来创建 &lt;code&gt;Pull Request&lt;/code&gt; ，所以本文会描述如何在 &lt;code&gt;Emacs&lt;/code&gt; 中使用 &lt;code&gt;Forge&lt;/code&gt; 来管理 &lt;code&gt;GitHub Pull Request&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Magit 使用技巧</title>
      <link>http://localhost:1313/post/magit/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/magit/</guid>
      <description>&lt;h2 id=&#34;magit-介绍&#34;&gt;Magit 介绍&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Magit&lt;/code&gt; 是 &lt;code&gt;Emacs&lt;/code&gt; 中的一个用于管理 &lt;code&gt;Git&lt;/code&gt; 的工具，可以理解为 &lt;code&gt;Git&lt;/code&gt; 的前端操作界面。和 &lt;code&gt;SourceTree&lt;/code&gt; 客户端类似，不过功能却强大太多了，这也是我使用 &lt;code&gt;Emacs&lt;/code&gt; 的一个重要理由。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Magit&lt;/code&gt; 中有许多非常强大的功能，这里介绍几个非常有用，但是又不容易记住的。&lt;/p&gt;&#xA;&lt;p&gt;本文的 &lt;code&gt;Magit&lt;/code&gt; 所使用的快捷键需要配合 &lt;code&gt;evil-mode&lt;/code&gt; 使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows 下的 Git 自带 GPG</title>
      <link>http://localhost:1313/post/gitgpg/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/gitgpg/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;由于工作需要，需要使用 &lt;code&gt;Windows&lt;/code&gt; ，在 &lt;code&gt;Windows&lt;/code&gt; 中开发始终没有那么方便。最近在用 &lt;code&gt;Git&lt;/code&gt; 提交代码时想用 &lt;code&gt;GPG&lt;/code&gt; 进行签名，于是就下载了 &lt;a href=&#34;https://www.gpg4win.org/&#34;&gt;Gpg4win&lt;/a&gt; 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在 Emacs 中使用 Git Flow</title>
      <link>http://localhost:1313/post/gitflow/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/gitflow/</guid>
      <description>&lt;h2 id=&#34;git-flow-简介&#34;&gt;Git Flow 简介&lt;/h2&gt;&#xA;&lt;p&gt;随着 &lt;code&gt;GitHub&lt;/code&gt; 的流行，越来越多人开始使用 &lt;code&gt;Git&lt;/code&gt; ， &lt;code&gt;Git&lt;/code&gt; 的强大在于我们可以随时随地的创建分支。&lt;/p&gt;&#xA;&lt;p&gt;随时随地创建分支，给我带来了极大的方便，但同时，分支太多管理起来也是非常头疼。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Git&lt;/code&gt; 支持多人协作，如果没有一个规范的话，随着时间的变化，将会越来越难以管理。&lt;/p&gt;&#xA;&lt;p&gt;这时 &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;Git Flow&lt;/a&gt; 出现了，这个分支模型，为我们管理 &lt;code&gt;Git&lt;/code&gt; 分支提供了一个模型，用来管理 &lt;code&gt;Git&lt;/code&gt; 分支，有效的减少分支混乱不堪的情况。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
