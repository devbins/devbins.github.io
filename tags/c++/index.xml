<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on devbins blog</title>
    <link>http://devbins.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on devbins blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://devbins.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenSSL DES-CBC 加解密</title>
      <link>http://devbins.github.io/post/openssl_des_cbc/</link>
      <pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/openssl_des_cbc/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;上一篇文章讲了 &lt;code&gt;DES&lt;/code&gt; &lt;code&gt;ECB&lt;/code&gt; 加解密。&lt;/p&gt;&#xA;&lt;p&gt;由于 &lt;code&gt;ECB&lt;/code&gt; 模式是分组加密，且每组之间相互独立，所以就存在一个风险，可以调换分组之间的顺序。&lt;/p&gt;&#xA;&lt;p&gt;为了解决这个问题，需要添加初始化向量，它的作用是用来与第一个明文块进行异或操作，然后将结果送入加密函数。&lt;/p&gt;&#xA;&lt;p&gt;后续的每个明文块都与前一个块的密文进行异或后再加密。&lt;/p&gt;&#xA;&lt;p&gt;这样再改动顺序就不能还原最开始的明文了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenSSL DES-ECB 加解密</title>
      <link>http://devbins.github.io/post/openssl_des/</link>
      <pubDate>Sat, 18 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/openssl_des/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;今天我们接着看 &lt;code&gt;OpenSSL&lt;/code&gt; &lt;code&gt;DES&lt;/code&gt; &lt;code&gt;ECB&lt;/code&gt; 加密。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 OpenSSL 进行 SHA 计算</title>
      <link>http://devbins.github.io/post/openssl_sha/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/openssl_sha/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;上一篇文章讲了如何使用 &lt;code&gt;OpenSSL&lt;/code&gt; 进行 &lt;code&gt;MD5&lt;/code&gt; 计算，今天来说一说 &lt;code&gt;SHA&lt;/code&gt; 的使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用OpenSSL 进行 MD5 计算</title>
      <link>http://devbins.github.io/post/openssl_md5/</link>
      <pubDate>Wed, 25 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/openssl_md5/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;上一篇文章说了如何使用 &lt;code&gt;OpenSSL&lt;/code&gt; 进行 &lt;code&gt;Base64&lt;/code&gt; 编码，这篇文章来说一说如何进行 &lt;code&gt;MD5&lt;/code&gt; 计算&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 OpenSSL 进行 Base64 编解码</title>
      <link>http://devbins.github.io/post/openssl_base64/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/openssl_base64/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在上一篇文章中我们讲了如何使用 &lt;code&gt;CMake&lt;/code&gt; 搭建 &lt;code&gt;OpenSSL&lt;/code&gt; 环境，并打印了 &lt;code&gt;OpenSSL&lt;/code&gt; 的版本。&lt;/p&gt;&#xA;&lt;p&gt;今天要使用 &lt;code&gt;OpenSSL&lt;/code&gt; 进行 &lt;code&gt;Base64&lt;/code&gt; 编解码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JNI: HashMap&lt;-&gt;unordered_map</title>
      <link>http://devbins.github.io/post/jni_map/</link>
      <pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jni_map/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在进行 &lt;code&gt;JNI&lt;/code&gt; 开发的时候，经常会碰到需要传递 &lt;code&gt;Map&lt;/code&gt; 的需求。&lt;/p&gt;&#xA;&lt;p&gt;它们实现起来不难，但是写起来还是比较麻烦的，每次要写的时候都要老半天。&lt;/p&gt;&#xA;&lt;p&gt;所以这里给一个参考，希望在用到的时候能帮你进行快速开发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; Lambda捕获局部变量与成员变量</title>
      <link>http://devbins.github.io/post/lambda%E6%8D%95%E8%8E%B7/</link>
      <pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/lambda%E6%8D%95%E8%8E%B7/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;近来，在使用 &lt;code&gt;C++&lt;/code&gt; 写代码的时候经常会使用 &lt;code&gt;Lambda&lt;/code&gt; 作为回调函数进行使用，在使用的过程中发现有些东西没弄懂。&lt;/p&gt;&#xA;&lt;p&gt;就比如今天要说的，在 &lt;code&gt;Lambda&lt;/code&gt; 中使用值捕获的情况下，捕获成员变量和局部变量是否一样，在 &lt;code&gt;Lambda&lt;/code&gt; 内修改是否会影响外面的变量。&lt;/p&gt;&#xA;&lt;p&gt;废话不多说，下面开始。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; JSON</title>
      <link>http://devbins.github.io/post/c&#43;&#43;json/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/c&#43;&#43;json/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在 &lt;code&gt;C++&lt;/code&gt; 中有许多第三方库可以解析 JSON，但是都不是很好用，不能像 &lt;code&gt;Java&lt;/code&gt; 中的 &lt;a href=&#34;https://github.com/google/gson&#34;&gt;gson&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/alibaba/fastjson&#34;&gt;fastjson&lt;/a&gt; 一样直接把 JSON 直接转成对象。&lt;/p&gt;&#xA;&lt;p&gt;找了许多库，找到了&lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;nlohmann/json: JSON for Modern C++&lt;/a&gt;使用起来比较方便，也踩了坑，来了解一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>性能提高之JNI 缓存</title>
      <link>http://devbins.github.io/post/jnicache/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jnicache/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在 &lt;code&gt;JNI&lt;/code&gt; 中如果需要调用 &lt;code&gt;Java&lt;/code&gt; 的方法，首先需要使用 &lt;code&gt;FindClass&lt;/code&gt; 获取到 &lt;code&gt;jclass&lt;/code&gt; ，然后使用 &lt;code&gt;GetMethodID&lt;/code&gt; 获取到对应方法的 &lt;code&gt;ID&lt;/code&gt; ，字段也是一样的要使用 &lt;code&gt;GetFieldID&lt;/code&gt; 来获取。&lt;/p&gt;&#xA;&lt;p&gt;如果每次都要查找一遍，是比较麻烦和耗时的，今天就来研究一下怎么把它们缓存起来以提高性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JNI 局部引用释放</title>
      <link>http://devbins.github.io/post/jniref/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jniref/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;有过 &lt;code&gt;JNI&lt;/code&gt; 开发经历的都知道，在创建局部引用之后要释放。可是我们经常却直接返回 &lt;code&gt;env-&amp;gt;NewStringUTF(&amp;quot;&amp;quot;)&lt;/code&gt; 到 &lt;code&gt;Java&lt;/code&gt; 没有释放，并且不会有问题，本文就来研究一下局部引用的释放问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>对比Rust引用与C&#43;&#43;引用</title>
      <link>http://devbins.github.io/post/ref/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/ref/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;最近在学习 &lt;code&gt;Rust&lt;/code&gt; ， &lt;code&gt;Rust&lt;/code&gt; 中也有引用，这让我有点好奇 &lt;code&gt;Rust&lt;/code&gt; 的引用是不是与 &lt;code&gt;C++&lt;/code&gt; 一样，于是便有了此文。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; 与 OC</title>
      <link>http://devbins.github.io/post/ocpp/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/ocpp/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;最近在研究 &lt;code&gt;Cronet&lt;/code&gt; 网络库，涉及到 &lt;code&gt;Android&lt;/code&gt; 和 &lt;code&gt;iOS&lt;/code&gt; ，由于对 &lt;code&gt;OC&lt;/code&gt; 不怎么熟悉，所以在使用的时候碰到了 &lt;code&gt;C++&lt;/code&gt; 与 &lt;code&gt;OC&lt;/code&gt; 互相调用的问题，于是便有了此文。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;5大构造函数</title>
      <link>http://devbins.github.io/post/construct/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/construct/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;自 C++11 以来，引入了移动构造函数和移动赋值函数，使得在构造对象的时候可以减少调用次数，以提高性能。&lt;/p&gt;&#xA;&lt;p&gt;所以 C++的构造函数从 3 个变成了 5 个，分别是构造函数、拷贝构造函数、拷贝赋值函数、移动构造函数、移动赋值函数。&lt;/p&gt;&#xA;&lt;p&gt;它们非常相似，放在一起容易搞混，于是总结一下，便有了此文，希望能够对大家有所帮助。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
