<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JNI on devbins blog</title>
    <link>http://devbins.github.io/tags/jni/</link>
    <description>Recent content in JNI on devbins blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://devbins.github.io/tags/jni/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android so 方法找不到问题定位</title>
      <link>http://devbins.github.io/post/%E5%AE%9A%E4%BD%8Dso%E6%96%B9%E6%B3%95%E6%89%BE%E4%B8%8D%E5%88%B0/</link>
      <pubDate>Mon, 16 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/%E5%AE%9A%E4%BD%8Dso%E6%96%B9%E6%B3%95%E6%89%BE%E4%B8%8D%E5%88%B0/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;相信在 Android 中进行 jni 开发的基本都碰到过如下错误&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java.lang.UnsatisfiedLinkError: No implementation &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; void xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>JNI: HashMap&lt;-&gt;unordered_map</title>
      <link>http://devbins.github.io/post/jni_map/</link>
      <pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jni_map/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在进行 &lt;code&gt;JNI&lt;/code&gt; 开发的时候，经常会碰到需要传递 &lt;code&gt;Map&lt;/code&gt; 的需求。&lt;/p&gt;&#xA;&lt;p&gt;它们实现起来不难，但是写起来还是比较麻烦的，每次要写的时候都要老半天。&lt;/p&gt;&#xA;&lt;p&gt;所以这里给一个参考，希望在用到的时候能帮你进行快速开发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>性能提高之JNI 缓存</title>
      <link>http://devbins.github.io/post/jnicache/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jnicache/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在 &lt;code&gt;JNI&lt;/code&gt; 中如果需要调用 &lt;code&gt;Java&lt;/code&gt; 的方法，首先需要使用 &lt;code&gt;FindClass&lt;/code&gt; 获取到 &lt;code&gt;jclass&lt;/code&gt; ，然后使用 &lt;code&gt;GetMethodID&lt;/code&gt; 获取到对应方法的 &lt;code&gt;ID&lt;/code&gt; ，字段也是一样的要使用 &lt;code&gt;GetFieldID&lt;/code&gt; 来获取。&lt;/p&gt;&#xA;&lt;p&gt;如果每次都要查找一遍，是比较麻烦和耗时的，今天就来研究一下怎么把它们缓存起来以提高性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JNI 局部引用释放</title>
      <link>http://devbins.github.io/post/jniref/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jniref/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;有过 &lt;code&gt;JNI&lt;/code&gt; 开发经历的都知道，在创建局部引用之后要释放。可是我们经常却直接返回 &lt;code&gt;env-&amp;gt;NewStringUTF(&amp;quot;&amp;quot;)&lt;/code&gt; 到 &lt;code&gt;Java&lt;/code&gt; 没有释放，并且不会有问题，本文就来研究一下局部引用的释放问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JNI中的引用</title>
      <link>http://devbins.github.io/post/jni%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/jni%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;平时写 &lt;code&gt;Java&lt;/code&gt; 代码对创建的对象，我们很少会去关心怎么手动释放内存，大多数时候都有 &lt;code&gt;GC&lt;/code&gt; 去帮我们回收。&lt;/p&gt;&#xA;&lt;p&gt;然而在 &lt;code&gt;JNI&lt;/code&gt; 中，几乎都是 &lt;code&gt;C/C++&lt;/code&gt; 的代码，它们是没有 &lt;code&gt;GC&lt;/code&gt; 的，所以对内存的使用就需要格外小心了。&lt;/p&gt;&#xA;&lt;p&gt;因此在 &lt;code&gt;JNI&lt;/code&gt; 中提供了三种引用类型，分别是局部引用、全局引用、弱全局引用。下面介绍这三种引用。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
