<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on devbins blog</title>
    <link>http://devbins.github.io/categories/linux/</link>
    <description>Recent content in Linux on devbins blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 27 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://devbins.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>树莓派安装 Docker</title>
      <link>http://devbins.github.io/post/raspberry_docker/</link>
      <pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/raspberry_docker/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;要想在树莓派上搭建服务，使用 &lt;code&gt;Docker&lt;/code&gt; 是一个不错的选择，可以不用配一大堆环境，也不用担心把环境搞得乱七八糟。&lt;/p&gt;&#xA;&lt;p&gt;今天讲一下如何在树莓派上安装 &lt;code&gt;Docker&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用netcat调试TCP/UDP</title>
      <link>http://devbins.github.io/post/netcat/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/netcat/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;最近开发用到了 &lt;code&gt;socket&lt;/code&gt; ，然后开发好了之后，会按照一定的规则发送数据，但是客户端还没开发。&lt;/p&gt;&#xA;&lt;p&gt;这时候我想要连上 &lt;code&gt;socket&lt;/code&gt; 去调试，看看都发了什么，有没有按照规则发送数据。却由于客户端没有开发好却没法调试。&lt;/p&gt;&#xA;&lt;p&gt;经过一番查找，找到了 &lt;code&gt;netcat(使用的命令是nc)&lt;/code&gt; ， 它可以用来连接 &lt;code&gt;TCP&lt;/code&gt; ，恰好能满足我的需要，这样就非常方便，而不用等到客户端开发好了，才能调试。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mmap 探索</title>
      <link>http://devbins.github.io/post/mmap/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/mmap/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;之前研究 &lt;code&gt;mmap&lt;/code&gt; 发现有一个地方不是非常理解，为什么使用 &lt;code&gt;mmap&lt;/code&gt; 完成了文件到进程地址空间的映射还要调用 &lt;code&gt;msync&lt;/code&gt; 来进行同步？&lt;/p&gt;&#xA;&lt;p&gt;我经过查找资料后找到了答案，由于讲到的人比较少，所以便有了此文，希望对同样有困惑的人有帮助。&lt;/p&gt;</description>
    </item>
    <item>
      <title>把Manjaro安装到Macbook Pro的外置硬盘</title>
      <link>http://devbins.github.io/post/macinstallmanjaro/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/macinstallmanjaro/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;在开始行动之前，请使用Time Machine备份系统，以免出现数据丢失，导致不可挽回的局面。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;随着电脑的使用，软件越装越多，感觉越来越卡，在Mac上也不能例外。于是我就萌生来在Mac上装Linux的想法，毕竟Mac的配置跑Linux完全没有问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ROS文件系统</title>
      <link>http://devbins.github.io/post/rosfilesystem/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/rosfilesystem/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在上一篇文章中，我们谈到了怎么在 &lt;code&gt;Arch&lt;/code&gt; 系的 &lt;code&gt;Linux&lt;/code&gt; 上安装 &lt;code&gt;ROS&lt;/code&gt; ，这只是入门的第一步，接下来我们要来了解 &lt;code&gt;ROS&lt;/code&gt; 的文件系统。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parallels Desktop 安装 Manjaro 无法进入安装界面的解决办法</title>
      <link>http://devbins.github.io/post/parallel_manjaro/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/parallel_manjaro/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;自从使用 &lt;code&gt;Manjaro 19&lt;/code&gt; 开始，在 &lt;code&gt;Parallels Desktop&lt;/code&gt; 中安装 &lt;code&gt;Manjaro&lt;/code&gt; 发行版的时候，要不就卡在启动页面进不去安装页面，要不就是在安装 &lt;code&gt;Parallels Tools&lt;/code&gt; 后卡在启动页面，折腾了许久，翻遍了各个论坛和帖子都没有找到解决方案，于是我有两种选择，一种是使用其他发行版(对我试了其他发行版)，另一种是用其它虚拟机软件(Virtual Box)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一键自动安装 ArchLinux</title>
      <link>http://devbins.github.io/post/autoinstallarch/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/autoinstallarch/</guid>
      <description>&lt;h2 id=&#34;前因&#34;&gt;前因&lt;/h2&gt;&#xA;&lt;p&gt;由于我经常需要用到 &lt;code&gt;Linux&lt;/code&gt; 就不可避免的要经常需要安装各种 &lt;code&gt;Linux&lt;/code&gt; 实在是非常耗费时间的事情，装系统可能不下于百次了。&lt;/p&gt;&#xA;&lt;p&gt;每次装系统都要花费许多时间，于是我就考虑能不能写一个脚本让其自动化安装，以节约时间。&lt;/p&gt;&#xA;&lt;p&gt;虽然现在安装 &lt;code&gt;Linux&lt;/code&gt; 非常方便，尤其是带有良好的安装界面，基本上只要点击下一步就能够装好。&lt;/p&gt;&#xA;&lt;p&gt;但是我的需求是不需要带有 GUI 的，毕竟在虚拟机上使用 GUI 体验并不是非常好。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GPG加密三</title>
      <link>http://devbins.github.io/post/gpg3/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/gpg3/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;经过前面的两次的学习，各位小伙伴应该能够满足日常使用了。今天我们把剩下的一些知识给讲完，将来会用到的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GPG加密二</title>
      <link>http://devbins.github.io/post/gpg2/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/gpg2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;上一篇文章我们了解了怎么使用 &lt;code&gt;GPG&lt;/code&gt; 进行加密、解密、签名。&lt;/p&gt;&#xA;&lt;p&gt;这篇来讲讲密钥的导入导出以及子密钥的使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GPG加密一</title>
      <link>http://devbins.github.io/post/gpg/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/gpg/</guid>
      <description>&lt;h2 id=&#34;gpg介绍&#34;&gt;GPG介绍&lt;/h2&gt;&#xA;&lt;p&gt;提到 &lt;code&gt;GPG&lt;/code&gt; 不得不提一下 &lt;code&gt;PGP(Pretty Good Privacy)&lt;/code&gt; ， &lt;code&gt;PGP&lt;/code&gt; 最开始是由 &lt;code&gt;Phil Zimmermann&lt;/code&gt; 开发，开发的目的是为了躲避监视，如果文件在网络上明文传输，那是多么危险。 &lt;code&gt;PGP&lt;/code&gt; 虽然受很多人喜爱，但是是个商业软件，不能自由使用。所以自由基金会决定自己开发一个取名叫 &lt;code&gt;GPG&lt;/code&gt; ，这就是 &lt;code&gt;GPG&lt;/code&gt; 的由来。 &lt;code&gt;GPG&lt;/code&gt; 和 &lt;code&gt;PGP&lt;/code&gt; 都遵循 &lt;code&gt;OpenPGP&lt;/code&gt; 加解密标准， 现在 &lt;code&gt;PGP&lt;/code&gt; 被赛门铁克公司收购了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ArchLinux 安装 UEFI &#43; GPT</title>
      <link>http://devbins.github.io/post/archlinux%E5%AE%89%E8%A3%85uefi/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/archlinux%E5%AE%89%E8%A3%85uefi/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;之前写过一篇 Arch Linux 安装的文章，不过那是使用 MBR 引导的，但是现在很多机器都已经使用上 UEFI 了，这里就是在 UEFI 上的实践。&lt;/p&gt;&#xA;&lt;p&gt;本篇文章只讲和 MBR 不一样的地方，不然文章会显得啰嗦很长。MBR 安装方式会在文末给出链接，两篇结合起来看会好点。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Arch Linux 安装</title>
      <link>http://devbins.github.io/post/archlinux/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/archlinux/</guid>
      <description>&lt;p&gt;今年开始我一直使用 &lt;code&gt;Manjaro&lt;/code&gt; ，这是一个基于 &lt;code&gt;Arch&lt;/code&gt; 的发行版，有较友好的安装界面。省去了不少折腾，但是这也带来了一些问题，你不知道有些东西是没有必要的，驱动怎么安装，分区怎么分。从头开始会让你更了解 &lt;code&gt;Linux&lt;/code&gt; ，虽然这么说，但我还是没有选择折腾，直到最近在升级的时候有线网卡找不到了，一下子和全球的人失去了联系，进入了孤岛，这是多么痛苦的一件事。于是下定决心，折腾一下。&lt;/p&gt;&#xA;&lt;p&gt;本文不适合一点 Linux 都不懂的小白，至少你有使用过，懂得基本命令。如果你是新手 &lt;code&gt;Manjaro&lt;/code&gt; 或者 &lt;code&gt;Ubuntu&lt;/code&gt; 可能会适合你。&lt;/p&gt;&#xA;&lt;p&gt;本文教程需要你准备一个额外的 4G U 盘，制作环境是 Linux。&lt;/p&gt;</description>
    </item>
    <item>
      <title>小米路由器刷 Padavan</title>
      <link>http://devbins.github.io/post/miwifipadavan/</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/miwifipadavan/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;半个月前，我把小米路由器刷成了 openwrt，使用之后发现很难受。很多软件没办法直接下载，更新源也更了半天更不下来。里面的功能配置起来有些复杂不能开箱即用，用来折腾倒是不错，但是一款路由器是可是互联网的通道，随便瞎搞没了网络，就不好玩了。在折腾的过程中发现了 Padavan。刷上用了一段时间还不错，记录一下。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>小米路由器刷 openwrt</title>
      <link>http://devbins.github.io/post/miwifi/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/miwifi/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;我买过两个小米路由器，一个是小米路由器 mini、另一个是小米路由器 R2D 带硬盘的。mini 一直放在家里用，没怎么去折腾。后来买 R2D 是因为电脑的空间剩余不多，买个带硬盘的，把一部分文件放到路由器上。买来后就不断在小米论坛上逛，看看有没有什么好玩的，后来发现了 openwrt。这就开启了折腾之旅，有搭建网站的、下载的、代理的……各种，这就是一台 Linux 电脑啊，很是兴奋也想搞个自己的。&lt;/p&gt;&#xA;&lt;p&gt;开始在论坛上找各种教程，发现 R2D 的 opkg 居然不能用，试了各种办法都效果不好，最糟糕的是 R2D 居然不能装 openwrt，这就没得玩了。R2D 也就一直充当着一个硬盘的作用,偶尔也折腾一下，看看论坛有没有出能装 openwrt 的教程，等的我心都凉了，以后买路由器想折腾还是不要买小米的。&#xA;今年过年回家发现 WiFi 连不上了，跑到放路由器的地方一看，多出了一个白色的家伙，看着也像路由器，研究了一下这家伙确实是路由器，而且还是装宽带送的，这下好了，mini 腾出来了，也就有了下文。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Manjaro 的使用</title>
      <link>http://devbins.github.io/post/manjaro/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/manjaro/</guid>
      <description>&lt;h2 id=&#34;manjaro-使用的原因&#34;&gt;Manjaro 使用的原因&lt;/h2&gt;&#xA;&lt;p&gt;最近把操作系统换成了 Linux，Linux 发行版众多，选择一个作为日常使用非常纠结。之前折腾过 RHEL 系、openSUSE、都非常不错，不过装 QQ 等国产软件还是比较麻烦，偶然在&lt;a href=&#34;https://emacs-china.org/&#34;&gt;emacs-china&lt;/a&gt;上看到有人推荐使用 Manjaro 于是我就抱着尝试的心态试试，发现还不错。在&lt;a href=&#34;https://distrowatch.com/table.php?distribution=manjaro&#34;&gt;distrowatch&lt;/a&gt;上排名排在第二，人气很高，这就让我放心了，那么多人使用解决问题也会比较方便。真正让我选择它的是在虚拟机上打开 Android Studio 速度比其他发行版快。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 SSH 登录服务器</title>
      <link>http://devbins.github.io/post/ssh/</link>
      <pubDate>Sat, 13 Jan 2018 11:30:51 +0800</pubDate>
      <guid>http://devbins.github.io/post/ssh/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;常常和服务器打交道的同志，最频繁的操作就是登陆服务器。每次登陆服务器都要输入密码特别的烦人。&#xA;有没有一种办法可以只输入一次密码，以后有都不用再输入密码的办法？如果有多个服务器怎么办？又要输密码吗？&#xA;其实我们常常使用 SSH 登录服务器，这个 SSH 就提供了这样的操作，不过需要配置。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>openSUSE 下安装 Parallels Tools</title>
      <link>http://devbins.github.io/post/opensuse/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/opensuse/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Parallels Desktop 是 macOS 上一款优秀的虚拟机软件，支持各种操作系统。然而想要在其上面愉快的使用桌面操作系统，还需要在虚拟机上安装 Parallels Tools 这个工具。在 Windows 上和 Ubuntu 以及 Centos 上安装还是非常简单，然而我在 openSUSE 上尝试却失败了，寻找良久才找到解决方法。遂以此文纪念我踩过的坑，以便给后人提供参考，而不会错过一些美好的事情。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Tmux</title>
      <link>http://devbins.github.io/post/tmux/</link>
      <pubDate>Sun, 18 Jun 2017 00:00:00 +0000</pubDate>
      <guid>http://devbins.github.io/post/tmux/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;做开发经常需要在各种环境中切来切去，回来的时候环境已经变了。Tmux 可以创建多个会话在不同环境中切换，回来的时候还是那个她，熟悉的味道。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
