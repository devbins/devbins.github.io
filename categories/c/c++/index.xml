<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on devbins blog</title>
    <link>http://devbins.github.io/categories/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on devbins blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://devbins.github.io/categories/c/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C语言字符串\0的截断陷阱</title>
      <link>http://devbins.github.io/post/cstring/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cstring/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;字符串在 C 语言中是一种常见的数据类型，以字符数组的形式存储。而 C 语言中的字符串以 &lt;code&gt;\0&lt;/code&gt; （空字符）作为结束符。然而， &lt;code&gt;\0&lt;/code&gt; 的存在可能导致一些问题，特别是在处理包含 &lt;code&gt;\0&lt;/code&gt; 的字符串时，常见的字符串处理函数可能会出现截断的情况。&lt;/p&gt;
&lt;p&gt;最近就在字符串上踩了坑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 内存泄漏检测</title>
      <link>http://devbins.github.io/post/c_mem_leak/</link>
      <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/c_mem_leak/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上一篇文章中我们讲了&lt;a href=&#34;http://localhost:1313/post/leakcanary/&#34;&gt;使用LeakCanary 内存泄漏检测的原理&lt;/a&gt;，但是它只能检测 &lt;code&gt;Java&lt;/code&gt; 层的泄漏，对 &lt;code&gt;C/C++&lt;/code&gt; 并没有办法。&lt;/p&gt;
&lt;p&gt;所以这篇文章来聊一聊如何检测 &lt;code&gt;C/C++&lt;/code&gt; 内存泄漏。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cout打印uint8_t</title>
      <link>http://devbins.github.io/post/cout%E8%BE%93%E5%87%BAuint8_t/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cout%E8%BE%93%E5%87%BAuint8_t/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在调试的时候使用 &lt;code&gt;cout&lt;/code&gt; 打印 &lt;code&gt;uint8_t&lt;/code&gt; 类型数据，结果却什么都没有打印出来，一直以为程序有问题，调试了半天发现 &lt;code&gt;cout&lt;/code&gt; 会使用 &lt;code&gt;char&lt;/code&gt; 类型来打印 &lt;code&gt;uint8_t&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装RTags</title>
      <link>http://devbins.github.io/post/install_rtags/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/install_rtags/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://devbins.github.io/post/rtags/&#34;&gt;使用 RTags 预处理 C/C++&lt;/a&gt;这篇文章中提到了 &lt;code&gt;rtags&lt;/code&gt; 的使用，于是我在 &lt;code&gt;Linux&lt;/code&gt; 中使用的时候碰到了安装的问题并顺利解决了。&lt;/p&gt;
&lt;p&gt;然后又在 &lt;code&gt;Mac&lt;/code&gt; 上进行了尝试，也碰到了问题，记录一下，希望能帮助需要的人。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Test 框架</title>
      <link>http://devbins.github.io/post/gtest/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gtest/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;C/C++&lt;/code&gt; 开发的项目，在进行测试的时候，要么自己写一些简单的例子进行测试，要么使用第三方框架。自己写简单的例子对于大项目来说效率就不高，而且输出的结果就不是很专业，不能得到一个测试报告。&lt;/p&gt;
&lt;p&gt;所以我们有必要选择一个比较好的测试框架来对代码进行测试，今天要介绍的就是谷歌的测试框架 &lt;a href=&#34;https://github.com/google/googletest&#34;&gt;google/googletest: GoogleTest - Google Testing and Mocking Framework&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 包依赖管理</title>
      <link>http://devbins.github.io/post/conan/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/conan/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在开发过程中，我们难免会使用到第三方库，在 &lt;code&gt;C/C++&lt;/code&gt; 中使用第三库都是把源码下载下来，然后进行编译。&lt;/p&gt;
&lt;p&gt;在多人协作的时候，每个人都需要在自己的电脑上编译一遍，非常的麻烦，编译时间也会随着库的增加不断增加。&lt;/p&gt;
&lt;p&gt;其它语言也有这个问题，它们有包管理工具来管理这些依赖，比如 &lt;code&gt;Java&lt;/code&gt; 的 &lt;code&gt;Maven&lt;/code&gt; 、 &lt;code&gt;Gradle&lt;/code&gt; ， &lt;code&gt;Rust&lt;/code&gt; 的 &lt;code&gt;cargo&lt;/code&gt; ， &lt;code&gt;Python&lt;/code&gt; 的 &lt;code&gt;pip&lt;/code&gt; ， &lt;code&gt;Node&lt;/code&gt; 的 &lt;code&gt;npm&lt;/code&gt; 、 &lt;code&gt;yarn&lt;/code&gt; 等，使用起来非常方便。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C/C++&lt;/code&gt; 在包依赖管理工具上一直没有一个较好的，不过还是有一些工具的，我们今天要介绍的就是 &lt;code&gt;JFrog&lt;/code&gt; 推出的 &lt;code&gt;Conan&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 ccls 预处理 C/C&#43;&#43;</title>
      <link>http://devbins.github.io/post/cclspre/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cclspre/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://devbins.github.io/post/rtags/&#34;&gt;使用 RTags 预处理 C/C++&lt;/a&gt;中，我介绍了使用 &lt;code&gt;RTags&lt;/code&gt; 来进行预处理，然后在实践中发现了另外一个工具也可以做到，那就是 &lt;code&gt;ccls&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;今天就来介绍在 &lt;code&gt;ccls&lt;/code&gt; 如何查看预处理之后的代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 RTags 预处理 C/C&#43;&#43;</title>
      <link>http://devbins.github.io/post/rtags/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/rtags/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;先来看一个动图
&lt;img src=&#34;../../../images/rtags.gif&#34; alt=&#34;&#34;&gt;
我们在使用 &lt;code&gt;C/C++&lt;/code&gt; 的时候，或多或少都会碰到宏，不论是自己写的还是别人写的。在使用宏的时候，如果有点复杂那很难看懂，并且非常容易出错，如果能够在编写代码的时候就知道宏展开之后的样子，将会大大提高编码效率，提高正确性。&lt;/p&gt;
&lt;p&gt;本篇文章将要介绍在 &lt;code&gt;Emacs&lt;/code&gt; 中使用 &lt;code&gt;RTags&lt;/code&gt; 来查看宏展开后的样子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CMake基础</title>
      <link>http://devbins.github.io/post/cmake/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cmake/</guid>
      <description>前言 自从 AndroidStudio2.2 开始支持 CMAKE 来构建 C/C++ 程序之后，作为 Android 开发就可以使用 CMake 来替换 Android.mk 了。 基本使用 在学习 CMAKE 之前，我们先来看一下如何使用 CMAKE 编译项目。假设 CMakeLists.txt 已经编</description>
    </item>
    
    <item>
      <title>使用ccls作为C/C&#43;&#43;的补全方案</title>
      <link>http://devbins.github.io/post/ccls/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/ccls/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近使用 &lt;code&gt;C/C++&lt;/code&gt; 开发，在 &lt;code&gt;Emacs&lt;/code&gt; 下使用 &lt;code&gt;Cmake&lt;/code&gt; 作为编译工具，结合 &lt;code&gt;ccls&lt;/code&gt; 进行代码补全，有着不错的体验，于是记录一下。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
