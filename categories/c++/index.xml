<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on devbins blog</title>
    <link>http://devbins.github.io/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on devbins blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 13 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://devbins.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cocos2d Layer 中点击事件穿透的最佳解决方案</title>
      <link>http://devbins.github.io/post/cocos2d_swallow_touch/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cocos2d_swallow_touch/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;熟悉 &lt;code&gt;Cocos2d&lt;/code&gt; 开发的应该都知道，在一个场景中如果有多个 &lt;code&gt;Layer&lt;/code&gt; ，这些 &lt;code&gt;Layer&lt;/code&gt; 一个一个的叠在上面，当我们点击 &lt;code&gt;Layer&lt;/code&gt; 上的按钮的时候可以正常的触发对应的事件。&lt;/p&gt;
&lt;p&gt;但是，当点击的位置所在的 &lt;code&gt;Layer&lt;/code&gt; 没有事件要响应，这时候触摸事件就会传递到下面的 &lt;code&gt;Layer&lt;/code&gt; ，这是我们所不希望的，在经过一番搜索之后，找到了一个不错的方案，分享一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; JSON</title>
      <link>http://devbins.github.io/post/c&#43;&#43;json/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/c&#43;&#43;json/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;C++&lt;/code&gt; 中有许多第三方库可以解析 JSON，但是都不是很好用，不能像 &lt;code&gt;Java&lt;/code&gt; 中的 &lt;a href=&#34;https://github.com/google/gson&#34;&gt;gson&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/alibaba/fastjson&#34;&gt;fastjson&lt;/a&gt; 一样直接把 JSON 直接转成对象。&lt;/p&gt;
&lt;p&gt;找了许多库，找到了&lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;nlohmann/json: JSON for Modern C++&lt;/a&gt;使用起来比较方便，也踩了坑，来了解一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>性能提高之JNI 缓存</title>
      <link>http://devbins.github.io/post/jnicache/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/jnicache/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;JNI&lt;/code&gt; 中如果需要调用 &lt;code&gt;Java&lt;/code&gt; 的方法，首先需要使用 &lt;code&gt;FindClass&lt;/code&gt; 获取到 &lt;code&gt;jclass&lt;/code&gt; ，然后使用 &lt;code&gt;GetMethodID&lt;/code&gt; 获取到对应方法的 &lt;code&gt;ID&lt;/code&gt; ，字段也是一样的要使用 &lt;code&gt;GetFieldID&lt;/code&gt; 来获取。&lt;/p&gt;
&lt;p&gt;如果每次都要查找一遍，是比较麻烦和耗时的，今天就来研究一下怎么把它们缓存起来以提高性能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JNI 局部引用释放</title>
      <link>http://devbins.github.io/post/jniref/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/jniref/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;有过 &lt;code&gt;JNI&lt;/code&gt; 开发经历的都知道，在创建局部引用之后要释放。可是我们经常却直接返回 &lt;code&gt;env-&amp;gt;NewStringUTF(&amp;quot;&amp;quot;)&lt;/code&gt; 到 &lt;code&gt;Java&lt;/code&gt; 没有释放，并且不会有问题，本文就来研究一下局部引用的释放问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对比Rust引用与C&#43;&#43;引用</title>
      <link>http://devbins.github.io/post/ref/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/ref/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在学习 &lt;code&gt;Rust&lt;/code&gt; ， &lt;code&gt;Rust&lt;/code&gt; 中也有引用，这让我有点好奇 &lt;code&gt;Rust&lt;/code&gt; 的引用是不是与 &lt;code&gt;C++&lt;/code&gt; 一样，于是便有了此文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 与 OC</title>
      <link>http://devbins.github.io/post/ocpp/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/ocpp/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在研究 &lt;code&gt;Cronet&lt;/code&gt; 网络库，涉及到 &lt;code&gt;Android&lt;/code&gt; 和 &lt;code&gt;iOS&lt;/code&gt; ，由于对 &lt;code&gt;OC&lt;/code&gt; 不怎么熟悉，所以在使用的时候碰到了 &lt;code&gt;C++&lt;/code&gt; 与 &lt;code&gt;OC&lt;/code&gt; 互相调用的问题，于是便有了此文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;5大构造函数</title>
      <link>http://devbins.github.io/post/construct/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/construct/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;自C++11以来，引入了移动构造函数和移动赋值函数，使得在构造对象的时候可以减少调用次数，以提高性能。&lt;/p&gt;
&lt;p&gt;所以C++的构造函数从3个变成了5个，分别是构造函数、拷贝构造函数、拷贝赋值函数、移动构造函数、移动赋值函数。&lt;/p&gt;
&lt;p&gt;它们非常相似，放在一起容易搞混，于是总结一下，便有了此文，希望能够对大家有所帮助。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
