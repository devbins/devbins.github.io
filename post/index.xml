<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on devbins blog</title>
    <link>http://devbins.github.io/post/</link>
    <description>Recent content in Posts on devbins blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://devbins.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GDB调试</title>
      <link>http://devbins.github.io/post/gdb/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gdb/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gdb&lt;/code&gt; 是 &lt;code&gt;GNU&lt;/code&gt; 下的一款调试器，支持常见的语言，例如 &lt;code&gt;C/C++&lt;/code&gt; 、 &lt;code&gt;Go&lt;/code&gt; 、 &lt;code&gt;Rust&lt;/code&gt; 等等。&lt;/p&gt;
&lt;p&gt;调试器对我们开发程序的时候有非常大的帮助，是每一个开发都需要学会的调试技能。&lt;/p&gt;
&lt;p&gt;今天来了解一下 &lt;code&gt;gdb&lt;/code&gt; 的使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Forge管理GitHub Issue</title>
      <link>http://devbins.github.io/post/forge_issue/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/forge_issue/</guid>
      <description>前言 在Emacs中使用Forge管理GitHub Pull Request中，我聊到了在 Emacs 中使用 Forge 管理 GitHub Pull Request ，今天来讲一讲怎么管理 GitHub Issue 。 使用 使用之前需</description>
    </item>
    
    <item>
      <title>Emacs中使用Forge管理GitHub Pull Request</title>
      <link>http://devbins.github.io/post/forge/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/forge/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;GitHub&lt;/code&gt; 与其他开发者合作需要频繁的创建 &lt;code&gt;Pull Request&lt;/code&gt; 或者 Review 别人提交的 &lt;code&gt;Pull Request&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;自从我使用 &lt;code&gt;Emacs&lt;/code&gt; 来管理 &lt;code&gt;Git&lt;/code&gt; 仓库后一直用的很舒服，但是这也仅限于自己的仓库。创建 &lt;code&gt;Pull Reqeust&lt;/code&gt; 也是用的网页，这样的操作体验就不一致了，需要在 &lt;code&gt;Emacs&lt;/code&gt; 和浏览器来回切换。&lt;/p&gt;
&lt;p&gt;于是我搜索一圈发现在 &lt;code&gt;Emacs&lt;/code&gt; 里可以使用 &lt;code&gt;Forge&lt;/code&gt; 来创建 &lt;code&gt;Pull Request&lt;/code&gt; ，所以本文会描述如何在 &lt;code&gt;Emacs&lt;/code&gt; 中使用 &lt;code&gt;Forge&lt;/code&gt; 来管理 &lt;code&gt;GitHub Pull Request&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cout打印uint8_t</title>
      <link>http://devbins.github.io/post/cout%E8%BE%93%E5%87%BAuint8_t/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cout%E8%BE%93%E5%87%BAuint8_t/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在调试的时候使用 &lt;code&gt;cout&lt;/code&gt; 打印 &lt;code&gt;uint8_t&lt;/code&gt; 类型数据，结果却什么都没有打印出来，一直以为程序有问题，调试了半天发现 &lt;code&gt;cout&lt;/code&gt; 会使用 &lt;code&gt;char&lt;/code&gt; 类型来打印 &lt;code&gt;uint8_t&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对单一职责的理解</title>
      <link>http://devbins.github.io/post/srp/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/srp/</guid>
      <description>前言 今天来聊一聊单一职责原则 背景 有两个端，移动端和服务端，起先设计是有两个接口，一个接口用于查询，一个用于更新。 客户端要求在更新接口在没有查</description>
    </item>
    
    <item>
      <title>安装RTgas</title>
      <link>http://devbins.github.io/post/install_rtags/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/install_rtags/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://devbins.github.io/post/rtags/&#34;&gt;使用 RTags 预处理 C/C++&lt;/a&gt;这篇文章中提到了 &lt;code&gt;rtags&lt;/code&gt; 的使用，于是我在 &lt;code&gt;Linux&lt;/code&gt; 中使用的时候碰到了安装的问题并顺利解决了。&lt;/p&gt;
&lt;p&gt;然后又在 &lt;code&gt;Mac&lt;/code&gt; 上进行了尝试，也碰到了问题，记录一下，希望能帮助需要的人。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Test 框架</title>
      <link>http://devbins.github.io/post/gtest/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gtest/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;C/C++&lt;/code&gt; 开发的项目，在进行测试的时候，要么自己写一些简单的例子进行测试，要么使用第三方框架。自己写简单的例子对于大项目来说效率就不高，而且输出的结果就不是很专业，不能得到一个测试报告。&lt;/p&gt;
&lt;p&gt;所以我们有必要选择一个比较好的测试框架来对代码进行测试，今天要介绍的就是谷歌的测试框架 &lt;a href=&#34;https://github.com/google/googletest&#34;&gt;google/googletest: GoogleTest - Google Testing and Mocking Framework&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 包依赖管理</title>
      <link>http://devbins.github.io/post/conan/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/conan/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在开发过程中，我们难免会使用到第三方库，在 &lt;code&gt;C/C++&lt;/code&gt; 中使用第三库都是把源码下载下来，然后进行编译。&lt;/p&gt;
&lt;p&gt;在多人协作的时候，每个人都需要在自己的电脑上编译一遍，非常的麻烦，编译时间也会随着库的增加不断增加。&lt;/p&gt;
&lt;p&gt;其它语言也有这个问题，它们有包管理工具来管理这些依赖，比如 &lt;code&gt;Java&lt;/code&gt; 的 &lt;code&gt;Maven&lt;/code&gt; 、 &lt;code&gt;Gradle&lt;/code&gt; ， &lt;code&gt;Rust&lt;/code&gt; 的 &lt;code&gt;cargo&lt;/code&gt; ， &lt;code&gt;Python&lt;/code&gt; 的 &lt;code&gt;pip&lt;/code&gt; ， &lt;code&gt;Node&lt;/code&gt; 的 &lt;code&gt;npm&lt;/code&gt; 、 &lt;code&gt;yarn&lt;/code&gt; 等，使用起来非常方便。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C/C++&lt;/code&gt; 在包依赖管理工具上一直没有一个较好的，不过还是有一些工具的，我们今天要介绍的就是 &lt;code&gt;JFrog&lt;/code&gt; 推出的 &lt;code&gt;Conan&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP/2</title>
      <link>http://devbins.github.io/post/http2/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/http2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近被问到 &lt;code&gt;HTTP/2&lt;/code&gt; 有什么特点，我只答了个多路复用，当时脑子还想到了二进制分帧和头部压缩，我以为是 &lt;code&gt;HTTP/3&lt;/code&gt; 的就没答上来。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;HTTP/2&lt;/code&gt; 普及率不高，而且最近 IETF 将 QUIC 发布为 RFC9000，这意味着 &lt;code&gt;HTTP/3&lt;/code&gt; 即将到来。所以很有可能会跳过 &lt;code&gt;HTTP/2&lt;/code&gt; 直接进入 &lt;code&gt;HTTP/3&lt;/code&gt; ，所以对 &lt;code&gt;HTTP/2&lt;/code&gt; 没有了解太多。&lt;/p&gt;
&lt;p&gt;不过既然被问到了那就好好学一下 &lt;code&gt;HTTP/2&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探秘 AIDL 为什么不支持 short</title>
      <link>http://devbins.github.io/post/aidl_short/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/aidl_short/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;前阵子复习 &lt;code&gt;AIDL&lt;/code&gt; 相关的知识，知道 &lt;code&gt;AIDL&lt;/code&gt; 不支持 &lt;code&gt;short&lt;/code&gt; 类型，但是我却发现同样使用 &lt;code&gt;AIDL&lt;/code&gt; 的 &lt;code&gt;Messenger&lt;/code&gt; 却可以。&lt;/p&gt;
&lt;p&gt;这是怎么回事，本文将探索这其中原因。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mmap 探索</title>
      <link>http://devbins.github.io/post/mmap/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/mmap/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前研究 &lt;code&gt;mmap&lt;/code&gt; 发现有一个地方不是非常理解，为什么使用 &lt;code&gt;mmap&lt;/code&gt; 完成了文件到进程地址空间的映射还要调用 &lt;code&gt;msync&lt;/code&gt; 来进行同步？&lt;/p&gt;
&lt;p&gt;我经过查找资料后找到了答案，由于讲到的人比较少，所以便有了此文，希望对同样有困惑的人有帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 ccls 预处理 C/C&#43;&#43;</title>
      <link>http://devbins.github.io/post/cclspre/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cclspre/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://devbins.github.io/post/rtags/&#34;&gt;使用 RTags 预处理 C/C++&lt;/a&gt;中，我介绍了使用 &lt;code&gt;RTags&lt;/code&gt; 来进行预处理，然后在实践中发现了另外一个工具也可以做到，那就是 &lt;code&gt;ccls&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;今天就来介绍在 &lt;code&gt;ccls&lt;/code&gt; 如何查看预处理之后的代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 RTags 预处理 C/C&#43;&#43;</title>
      <link>http://devbins.github.io/post/rtags/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/rtags/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;先来看一个动图
&lt;img src=&#34;../images/rtags.gif&#34; alt=&#34;&#34;&gt;
我们在使用 &lt;code&gt;C/C++&lt;/code&gt; 的时候，或多或少都会碰到宏，不论是自己写的还是别人写的。在使用宏的时候，如果有点复杂那很难看懂，并且非常容易出错，如果能够在编写代码的时候就知道宏展开之后的样子，将会大大提高编码效率，提高正确性。&lt;/p&gt;
&lt;p&gt;本篇文章将要介绍在 &lt;code&gt;Emacs&lt;/code&gt; 中使用 &lt;code&gt;RTags&lt;/code&gt; 来查看宏展开后的样子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对比C&#43;&#43;与Java变量初始化</title>
      <link>http://devbins.github.io/post/cppvariable/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cppvariable/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近发现在 &lt;code&gt;C++&lt;/code&gt; 的代码中还有不少是 &lt;code&gt;C&lt;/code&gt; 语言的代码，于是想要把 &lt;code&gt;C&lt;/code&gt; 的写法改成 &lt;code&gt;C++&lt;/code&gt; 的写法。&lt;/p&gt;
&lt;p&gt;其中碰到了 &lt;code&gt;C++&lt;/code&gt; 初始化的问题，查阅资料后发现有坑，于是便有了此文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Application 启动流程</title>
      <link>http://devbins.github.io/post/application/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/application/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://devbins.github.io/post/zygote/&#34;&gt;Zygote&lt;/a&gt; 这篇文章中提到， &lt;code&gt;Zygote&lt;/code&gt; 在收到创建新进程的请求之后，会创建新的进程，当时没有继续往下探索了，今天来探索一下 &lt;code&gt;Application&lt;/code&gt; 是如何创建的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Magit 使用技巧</title>
      <link>http://devbins.github.io/post/magit/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/magit/</guid>
      <description>&lt;h2 id=&#34;magit-介绍&#34;&gt;Magit 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Magit&lt;/code&gt; 是 &lt;code&gt;Emacs&lt;/code&gt; 中的一个用于管理 &lt;code&gt;Git&lt;/code&gt; 的工具，可以理解为 &lt;code&gt;Git&lt;/code&gt; 的前端操作界面。和 &lt;code&gt;SourceTree&lt;/code&gt; 客户端类似，不过功能却强大太多了，这也是我使用 &lt;code&gt;Emacs&lt;/code&gt; 的一个重要理由。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Magit&lt;/code&gt; 中有许多非常强大的功能，这里介绍几个非常有用，但是又不容易记住的。&lt;/p&gt;
&lt;p&gt;本文的 &lt;code&gt;Magit&lt;/code&gt; 所使用的快捷键需要配合 &lt;code&gt;evil-mode&lt;/code&gt; 使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SystemServer</title>
      <link>http://devbins.github.io/post/systemserver/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/systemserver/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;http://localhost:1313/post/zygote/&#34;&gt;Zygote&lt;/a&gt; 这篇文章中，我们提到 &lt;code&gt;Zygote&lt;/code&gt; 会创建 &lt;code&gt;SystemServer&lt;/code&gt; 进程，当时我们没有去了解。&lt;/p&gt;
&lt;p&gt;今天就来聊一聊 &lt;code&gt;SystemServer&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JNI中的引用</title>
      <link>http://devbins.github.io/post/jni%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/jni%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;平时写 &lt;code&gt;Java&lt;/code&gt; 代码对创建的对象，我们很少会去关心怎么手动释放内存，大多数时候都有 &lt;code&gt;GC&lt;/code&gt; 去帮我们回收。&lt;/p&gt;
&lt;p&gt;然而在 &lt;code&gt;JNI&lt;/code&gt; 中，几乎都是 &lt;code&gt;C/C++&lt;/code&gt; 的代码，它们是没有 &lt;code&gt;GC&lt;/code&gt; 的，所以对内存的使用就需要格外小心了。&lt;/p&gt;
&lt;p&gt;因此在 &lt;code&gt;JNI&lt;/code&gt; 中提供了三种引用类型，分别是局部引用、全局引用、弱全局引用。下面介绍这三种引用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zygote 是怎么使用 LocalSocket 进行进程间通信的</title>
      <link>http://devbins.github.io/post/localsocket/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/localsocket/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文基于 &lt;code&gt;Android10&lt;/code&gt; ，分析 &lt;code&gt;Zygote&lt;/code&gt; 与 &lt;code&gt;AMS&lt;/code&gt; 是如何使用 &lt;code&gt;LocalSocket&lt;/code&gt; 建立连接的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zygote</title>
      <link>http://devbins.github.io/post/zygote/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/zygote/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Zygote&lt;/code&gt; 是 &lt;code&gt;Android&lt;/code&gt; 中所有 &lt;code&gt;App&lt;/code&gt; 的父进程，有着举足轻重的地位。了解了 &lt;code&gt;Zygote&lt;/code&gt; 可以让你对系统如何工作有更深入的了解，今天来学习一下 &lt;code&gt;Zygote&lt;/code&gt; 的知识。&lt;/p&gt;
&lt;p&gt;本文基于 &lt;code&gt;Android10&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler 之 MessageQueue</title>
      <link>http://devbins.github.io/post/handler_mq/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/handler_mq/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上一篇文章，我们从 &lt;code&gt;Java&lt;/code&gt; 层探索了消息机制的原理，以及在使用中会碰到的问题，这一篇从 &lt;code&gt;MessageQueue&lt;/code&gt; 入手，带你了解 &lt;code&gt;Native&lt;/code&gt; 层的原理。&lt;/p&gt;
&lt;p&gt;本文源码基于 &lt;code&gt;Android10&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler</title>
      <link>http://devbins.github.io/post/handler/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/handler/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Handler&lt;/code&gt; 在 &lt;code&gt;Android&lt;/code&gt; 中的地位不用多说了，没有消息机制则寸步难行。&lt;/p&gt;
&lt;p&gt;通常我们会使用 &lt;code&gt;Handler&lt;/code&gt; 在主线程与子线程之间通信，那么它们是怎么通信的，有什么玄机？&lt;/p&gt;
&lt;p&gt;本文会带你从 &lt;code&gt;Java&lt;/code&gt; 层的源码了解其原理，以及在使用过程中要注意的地方。下一篇则从 &lt;code&gt;Native&lt;/code&gt; 层了解背后的原理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android中管道的使用</title>
      <link>http://devbins.github.io/post/pipe/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/pipe/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近读了一些 &lt;code&gt;Android&lt;/code&gt; 源码，发现其中不少是用 &lt;code&gt;pipe&lt;/code&gt; 机制来实现的，并且和我们往常使用 &lt;code&gt;pipe&lt;/code&gt;  有些不一样。&lt;/p&gt;
&lt;p&gt;有必要学习一下 &lt;code&gt;pipe&lt;/code&gt; 的使用，不然会影响阅读源码，并且 &lt;code&gt;Android&lt;/code&gt; 里的使用方式比较有技巧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;5大构造函数</title>
      <link>http://devbins.github.io/post/construct/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/construct/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;自C++11以来，引入了移动构造函数和移动赋值函数，使得在构造对象的时候可以减少调用次数，以提高性能。&lt;/p&gt;
&lt;p&gt;所以C++的构造函数从3个变成了5个，分别是构造函数、拷贝构造函数、拷贝赋值函数、移动构造函数、移动赋值函数。&lt;/p&gt;
&lt;p&gt;它们非常相似，放在一起容易搞混，于是总结一下，便有了此文，希望能够对大家有所帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>把Manjaro安装到Macbook Pro的外置硬盘</title>
      <link>http://devbins.github.io/post/macinstallmanjaro/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/macinstallmanjaro/</guid>
      <description>前言 在开始行动之前，请使用Time Machine备份系统，以免出现数据丢失，导致不可挽回的局面。 随着电脑的使用，软件越装越多，感觉越来越卡，</description>
    </item>
    
    <item>
      <title>OpenGL环境搭建</title>
      <link>http://devbins.github.io/post/opengl/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/opengl/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文在 &lt;code&gt;Manjaro Linux&lt;/code&gt; 下进行操作，学习如何在 &lt;code&gt;Linux&lt;/code&gt; 下结合 &lt;code&gt;CMake&lt;/code&gt; 搭建 &lt;code&gt;OpenGL&lt;/code&gt; 环境。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CMake基础</title>
      <link>http://devbins.github.io/post/cmake/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/cmake/</guid>
      <description>前言 自从 AndroidStudio2.2 开始支持 CMAKE 来构建 C/C++ 程序之后，作为 Android 开发就可以使用 CMake 来替换 Android.mk 了。 基本使用 在学习 CMAKE 之前，我们先来看一下如何使用 CMAKE 编译项目。假设 CMakeLists.txt 已经编</description>
    </item>
    
    <item>
      <title>使用ccls作为C/C&#43;&#43;的补全方案</title>
      <link>http://devbins.github.io/post/ccls/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/ccls/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近使用 &lt;code&gt;C/C++&lt;/code&gt; 开发，在 &lt;code&gt;Emacs&lt;/code&gt; 下使用 &lt;code&gt;Cmake&lt;/code&gt; 作为编译工具，结合 &lt;code&gt;ccls&lt;/code&gt; 进行代码补全，有着不错的体验，于是记录一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ROS文件系统</title>
      <link>http://devbins.github.io/post/rosfilesystem/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/rosfilesystem/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上一篇文章中，我们谈到了怎么在 &lt;code&gt;Arch&lt;/code&gt; 系的 &lt;code&gt;Linux&lt;/code&gt; 上安装 &lt;code&gt;ROS&lt;/code&gt; ，这只是入门的第一步，接下来我们要来了解 &lt;code&gt;ROS&lt;/code&gt; 的文件系统。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Arch上安装ROS</title>
      <link>http://devbins.github.io/post/%E5%9C%A8arch%E4%B8%8A%E5%AE%89%E8%A3%85ros/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/%E5%9C%A8arch%E4%B8%8A%E5%AE%89%E8%A3%85ros/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上周开始，我在 &lt;code&gt;Arch&lt;/code&gt; 上安装 &lt;code&gt;ROS&lt;/code&gt; ，装了一周才搞定，记录一下碰到的问题。&lt;/p&gt;
&lt;p&gt;官方推荐使用 &lt;code&gt;Ubuntu&lt;/code&gt; 来安装 &lt;code&gt;ROS&lt;/code&gt; ，但是我比较喜欢 &lt;code&gt;Arch&lt;/code&gt; 所以就尝试在 &lt;code&gt;Arch&lt;/code&gt; 上安装， &lt;code&gt;Arch&lt;/code&gt; 上安装 &lt;code&gt;ROS&lt;/code&gt; 的资料还是比较少的，官网的教程并不是那么准确，有误导性，所以写下此文，希望能帮助有缘人。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows 下的 Git 自带 GPG</title>
      <link>http://devbins.github.io/post/gitgpg/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gitgpg/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;由于工作需要，需要使用 &lt;code&gt;Windows&lt;/code&gt; ，在 &lt;code&gt;Windows&lt;/code&gt; 中开发始终没有那么方便。最近在用 &lt;code&gt;Git&lt;/code&gt; 提交代码时想用 &lt;code&gt;GPG&lt;/code&gt; 进行签名，于是就下载了 &lt;a href=&#34;https://www.gpg4win.org/&#34;&gt;Gpg4win&lt;/a&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows 下 Org-Mode 星期不显示</title>
      <link>http://devbins.github.io/post/orgmode%E6%98%9F%E6%9C%9F%E4%B8%8D%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/orgmode%E6%98%9F%E6%9C%9F%E4%B8%8D%E6%98%BE%E7%A4%BA/</guid>
      <description>现象 这些日子切换到 Windows 下使用 Emacs ，在使用 Org-Mode 设置计划时间后，星期几显示不出来，如下所示 解决办法 1 (setq system-time-locale &amp;#34;C&amp;#34;) 参考 org-mode中timestamp格式</description>
    </item>
    
    <item>
      <title>Rust 环境搭建</title>
      <link>http://devbins.github.io/post/rust%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/rust%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;早就听说 &lt;code&gt;Rust&lt;/code&gt; 的大名， 近两年 &lt;code&gt;Rust&lt;/code&gt; 发展的不错，从微软宣布要使用 &lt;code&gt;Rust&lt;/code&gt; 来替代 &lt;code&gt;C/C++&lt;/code&gt; 重写 &lt;code&gt;Windows&lt;/code&gt; 组件，到 &lt;code&gt;Rust&lt;/code&gt; 进入 &lt;code&gt;TIOBE&lt;/code&gt; 排名前20，越来越受到开发的关注。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rust&lt;/code&gt; 的官网介绍其是一门赋予每个人构建可靠且高效软件能力的语言。它的特点是：运行快，防止段错误，保证线程安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Parallels Desktop 安装 Manjaro 无法进入安装界面的解决办法</title>
      <link>http://devbins.github.io/post/parallel_manjaro/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/parallel_manjaro/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;自从使用 &lt;code&gt;Manjaro 19&lt;/code&gt; 开始，在 &lt;code&gt;Parallels Desktop&lt;/code&gt; 中安装 &lt;code&gt;Manjaro&lt;/code&gt; 发行版的时候，要不就卡在启动页面进不去安装页面，要不就是在安装 &lt;code&gt;Parallels Tools&lt;/code&gt; 后卡在启动页面，折腾了许久，翻遍了各个论坛和帖子都没有找到解决方案，于是我有两种选择，一种是使用其他发行版(对我试了其他发行版)，另一种是用其它虚拟机软件(Virtual Box)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gradle入门</title>
      <link>http://devbins.github.io/post/gradle/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gradle/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在前一篇文章我们讲了 &lt;code&gt;Groovy&lt;/code&gt; ，有了 &lt;code&gt;Groovy&lt;/code&gt; 的基础就能看懂 &lt;code&gt;Gradle&lt;/code&gt; 里的语法。但是光有 &lt;code&gt;Groovy&lt;/code&gt; 基础还是不够的， &lt;code&gt;Gradle&lt;/code&gt; 提供了一些 &lt;code&gt;API&lt;/code&gt; 让我们可以很方便的参与到项目的构建中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Groovy 入门</title>
      <link>http://devbins.github.io/post/groovy/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/groovy/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;Android&lt;/code&gt; 中现在默认的构建工具是 &lt;code&gt;Gradle&lt;/code&gt; ，而 &lt;code&gt;Gradle&lt;/code&gt; 构建工具是使用 &lt;code&gt;Groovy&lt;/code&gt; 语言编写的，这就使得了解 &lt;code&gt;Groovy&lt;/code&gt; 语言变得非常重要了。&lt;/p&gt;
&lt;p&gt;如果你不了解 &lt;code&gt;Groovy&lt;/code&gt; 会以为 &lt;code&gt;build.gralde&lt;/code&gt; 文件中写的就只是一些配置，其实并没有这么简单。之所以看起来项配置文件，是因为 &lt;code&gt;Groovy&lt;/code&gt; 的闭包特性，让我们写起来简单，看起来像配置文件，这就降低了编写的门槛。使得我们可以专注于 &lt;code&gt;Android&lt;/code&gt; 层面的业务逻辑。&lt;/p&gt;
&lt;p&gt;随着 &lt;code&gt;Android&lt;/code&gt; 的发展，我们不能局限于应用层，在构建的过程我们也可以进行一些优化。今天就来学习一下 &lt;code&gt;Groovy&lt;/code&gt; 这们语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 内存模型</title>
      <link>http://devbins.github.io/post/jmm/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/jmm/</guid>
      <description>前言 今天来学一下 Java 内存模型。 CPU 工作模型 在学 Java 内存模型之前，我们来了解一下 CPU 的工作模型。 现代计算机中的 CPU 的执行速度远高于内存的读取速度， CPU 每读</description>
    </item>
    
    <item>
      <title>Java 类的加载过程</title>
      <link>http://devbins.github.io/post/classloader1/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/classloader1/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上次说到了类的加载器，分为 &lt;code&gt;BootstrapClassLoader&lt;/code&gt; 、 &lt;code&gt;ExtClassLoader&lt;/code&gt; 、 &lt;code&gt;AppClassLoader&lt;/code&gt; 。具体是怎么加载的没说，这次来说一说类的加载过程，主要分为装载、链接、初始化。其中链接又可以分为验证、准备、解析。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTPS 原理</title>
      <link>http://devbins.github.io/post/https/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/https/</guid>
      <description>&lt;h2 id=&#34;为什么要有-https&#34;&gt;为什么要有 HTTPS&lt;/h2&gt;
&lt;p&gt;做开发的都知道 &lt;code&gt;HTTP&lt;/code&gt; 使用明文进行传输内容，就是在裸奔，一点安全感都没有。&lt;/p&gt;
&lt;p&gt;在传输的过程中任何一个节点都可以对内容进行监听，篡改，冒充。&lt;/p&gt;
&lt;p&gt;为了解决 &lt;code&gt;HTTP&lt;/code&gt; 存在的这些问题就出现了 &lt;code&gt;HTTPS&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClassLoader</title>
      <link>http://devbins.github.io/post/classloader/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/classloader/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上一篇我们了解了字节码的结构，这些字节码文件都是什么时候被加载到内存中的，今天就来聊聊类加载。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Class 探秘</title>
      <link>http://devbins.github.io/post/class/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/class/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt; 开发都知道 &lt;code&gt;.java&lt;/code&gt; 文件编译后得到的是 &lt;code&gt;.class&lt;/code&gt; 文件，这个文件是 &lt;code&gt;Java&lt;/code&gt; 虚拟机能够识别加载的文件。有了这个字节码文件 &lt;code&gt;Java&lt;/code&gt; 实现一次编写到处运行才成为可能。&lt;/p&gt;
&lt;p&gt;然而我们平时都是写 &lt;code&gt;.java&lt;/code&gt; 文件，很少接触 &lt;code&gt;.class&lt;/code&gt; 文件，今天就来看看 &lt;code&gt;.class&lt;/code&gt; 文件中有什么秘密，它长什么样子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 垃圾回收机制</title>
      <link>http://devbins.github.io/post/gc/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gc/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前我们介绍了 JVM 运行时内存是怎么分配的，其中方法区和堆是线程共享的，这里的对象如果不需要使用了，需要释放掉。&lt;/p&gt;
&lt;p&gt;但我们很少像 C/C++ 一样去自己管理，释放内存，这其中就要归功于 &lt;code&gt;Java GC&lt;/code&gt; ，它在背后默默的工作着。&lt;/p&gt;
&lt;p&gt;虽然 &lt;code&gt;Java GC&lt;/code&gt; 在背后默默的工作着，但是我们一直都不了解它，今天来看看它是怎么工作的，这样出现问题了才有应对之法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Emacs 中使用 Git Flow</title>
      <link>http://devbins.github.io/post/gitflow/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gitflow/</guid>
      <description>&lt;h2 id=&#34;git-flow-简介&#34;&gt;Git Flow 简介&lt;/h2&gt;
&lt;p&gt;随着 &lt;code&gt;GitHub&lt;/code&gt; 的流行，越来越多人开始使用 &lt;code&gt;Git&lt;/code&gt; ， &lt;code&gt;Git&lt;/code&gt; 的强大在于我们可以随时随地的创建分支。&lt;/p&gt;
&lt;p&gt;随时随地创建分支，给我带来了极大的方便，但同时，分支太多管理起来也是非常头疼。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt; 支持多人协作，如果没有一个规范的话，随着时间的变化，将会越来越难以管理。&lt;/p&gt;
&lt;p&gt;这时 &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;Git Flow&lt;/a&gt; 出现了，这个分支模型，为我们管理 &lt;code&gt;Git&lt;/code&gt; 分支提供了一个模型，用来管理 &lt;code&gt;Git&lt;/code&gt; 分支，有效的减少分支混乱不堪的情况。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 运行时内存分配</title>
      <link>http://devbins.github.io/post/jvm/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/jvm/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt; 是 &lt;code&gt;Java&lt;/code&gt; 程序员绕不过去的坎，今天学习下 &lt;code&gt;Java&lt;/code&gt; 虚拟机运行时是怎么分配内存的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt; 规范中规定， &lt;code&gt;JVM&lt;/code&gt; 运行时内存分为程序计数器、虚拟机栈、本地方法栈、方法区、堆，这5个部分，如下图所示。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的快捷键跨平台方案</title>
      <link>http://devbins.github.io/post/shortcutkey/</link>
      <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/shortcutkey/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;我经常要在 macOS 和 Linux 下来回切换使用，使用的过程中，有许多不便之处。比如快捷键就是一个非常头疼的问题，需要记两套不同的快捷键，而且两个平台的键位还不一样。&lt;/p&gt;
&lt;p&gt;熟练使用快捷键可以成吨的提高效率。于是在两个平台之间使用我都要刻意去配置让两个平台的快捷键尽肯能的相似，这样开发效率才不会受到太多的影响。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MPAndroidChart 使用总结</title>
      <link>http://devbins.github.io/post/mpandroidchart/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/mpandroidchart/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;今年开工以来，一直接触图表相关的开发，经过选择最后采用 &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; ，期间碰到了一些问题，踩了不少坑。特来总结一下，以免日后忘记。这些知识点虽然不难，但是非常零碎，找起来比较麻烦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一键自动安装 ArchLinux</title>
      <link>http://devbins.github.io/post/autoinstallarch/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/autoinstallarch/</guid>
      <description>&lt;h2 id=&#34;前因&#34;&gt;前因&lt;/h2&gt;
&lt;p&gt;由于我经常需要用到 &lt;code&gt;Linux&lt;/code&gt; 就不可避免的要经常需要安装各种 &lt;code&gt;Linux&lt;/code&gt; 实在是非常耗费时间的事情，装系统可能不下于百次了。&lt;/p&gt;
&lt;p&gt;每次装系统都要花费许多时间，于是我就考虑能不能写一个脚本让其自动化安装，以节约时间。&lt;/p&gt;
&lt;p&gt;虽然现在安装 &lt;code&gt;Linux&lt;/code&gt; 非常方便，尤其是带有良好的安装界面，基本上只要点击下一步就能够装好。&lt;/p&gt;
&lt;p&gt;但是我的需求是不需要带有 GUI 的，毕竟在虚拟机上使用 GUI 体验并不是非常好。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GPG加密五：在 Emacs 中使用 GPG 加密</title>
      <link>http://devbins.github.io/post/gpg5/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gpg5/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前我们介绍了 &lt;code&gt;GPG&lt;/code&gt; 的使用，也介绍了用 &lt;code&gt;GPG&lt;/code&gt; 来管理自己的密码。&lt;/p&gt;
&lt;p&gt;今天我们来讲一讲在 &lt;code&gt;Emacs&lt;/code&gt; 中配合 &lt;code&gt;GPG&lt;/code&gt; 加密 &lt;code&gt;Org mode&lt;/code&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GPG加密四：用 GPG 加密你的密码</title>
      <link>http://devbins.github.io/post/gpg4/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gpg4/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;前面我们讲的 &lt;code&gt;GPG&lt;/code&gt; 的相关内容，对于大多数人来可能用的不多。今天我们就来实际的使用一下，用它来管理你的密码。&lt;/p&gt;
&lt;p&gt;密码是我们日常都会用到的，而且使用很多，每个网站都有不同的账号和不同的密码。如果你使用同样的密码，那就非常危险了，一旦某个密码泄漏了，其他网站也会跟着遭殃。定期修改密码还是非常有必要的。&lt;/p&gt;
&lt;h2 id=&#34;pass-介绍&#34;&gt;pass 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pass&lt;/code&gt; 是一个符合 &lt;code&gt;Unix&lt;/code&gt; 哲学的命令行工具，它被设计成用来管理密码，并且是开源的，如果你不放心，可以去查看代码，或者改成你需要的。不要看到命令行就怕了，它有很多客户端，可以满足大多数人使用。&lt;/p&gt;
&lt;p&gt;类似 &lt;code&gt;pass&lt;/code&gt; 的产品有我们常见的 &lt;code&gt;1Password&lt;/code&gt; 、 &lt;code&gt;LastPass&lt;/code&gt; 等。 &lt;code&gt;1Password&lt;/code&gt; 是个收费的软件， &lt;code&gt;LastPass&lt;/code&gt; 虽然也有免费的版本，但是密码放在别人那里总是不放心。毕竟之前也出过幺蛾子。如果你有使用这些产品，也可以非常方便导入到 &lt;code&gt;pass&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pass&lt;/code&gt; 使用 &lt;code&gt;GPG&lt;/code&gt; 非对称加密，这就是我们选择它的原因。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GPG加密三</title>
      <link>http://devbins.github.io/post/gpg3/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gpg3/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;经过前面的两次的学习，各位小伙伴应该能够满足日常使用了。今天我们把剩下的一些知识给讲完，将来会用到的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GPG加密二</title>
      <link>http://devbins.github.io/post/gpg2/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gpg2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上一篇文章我们了解了怎么使用 &lt;code&gt;GPG&lt;/code&gt; 进行加密、解密、签名。&lt;/p&gt;
&lt;p&gt;这篇来讲讲密钥的导入导出以及子密钥的使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GPG加密一</title>
      <link>http://devbins.github.io/post/gpg/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/gpg/</guid>
      <description>&lt;h2 id=&#34;gpg介绍&#34;&gt;GPG介绍&lt;/h2&gt;
&lt;p&gt;提到 &lt;code&gt;GPG&lt;/code&gt; 不得不提一下 &lt;code&gt;PGP(Pretty Good Privacy)&lt;/code&gt; ， &lt;code&gt;PGP&lt;/code&gt; 最开始是由 &lt;code&gt;Phil Zimmermann&lt;/code&gt; 开发，开发的目的是为了躲避监视，如果文件在网络上明文传输，那是多么危险。 &lt;code&gt;PGP&lt;/code&gt; 虽然受很多人喜爱，但是是个商业软件，不能自由使用。所以自由基金会决定自己开发一个取名叫 &lt;code&gt;GPG&lt;/code&gt; ，这就是 &lt;code&gt;GPG&lt;/code&gt; 的由来。 &lt;code&gt;GPG&lt;/code&gt; 和 &lt;code&gt;PGP&lt;/code&gt; 都遵循 &lt;code&gt;OpenPGP&lt;/code&gt; 加解密标准， 现在 &lt;code&gt;PGP&lt;/code&gt; 被赛门铁克公司收购了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2019总结</title>
      <link>http://devbins.github.io/post/2019%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/2019%E6%80%BB%E7%BB%93/</guid>
      <description>Photo by NordWood Themes on Unsplash 看书 今年读书比较多，大多数是电子书。还有两本纸质书，其中一本是在书店里看完的，用了 4 天下班后的两个小时看完的，比较新奇的体验。 我</description>
    </item>
    
    <item>
      <title>Parallels tools 安装失败</title>
      <link>http://devbins.github.io/post/parallel/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/parallel/</guid>
      <description>&lt;h2 id=&#34;缘由&#34;&gt;缘由&lt;/h2&gt;
&lt;p&gt;最近做实验，需要一个新的 &lt;code&gt;Linux&lt;/code&gt; 环境来折腾，于是就去下载了最新版的 &lt;code&gt;Manjaro&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;按照常规安装好虚拟机之后，我还会安装 &lt;code&gt;Parallels tools&lt;/code&gt; 来更好的体验 &lt;code&gt;Linux&lt;/code&gt; 。 &lt;code&gt;Parallels tools&lt;/code&gt; 可以方便的在宿主机和虚拟机之间拷贝文件和共享文件，当然还有最重要的就是显示效果会好上一大截，鼠标移动不会卡顿，窗口的缩放可以自适应等，所以没有理由不装。&lt;/p&gt;
&lt;p&gt;在安装的过程中碰到了安装失败的情况，下面记录一下解决的过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用Docker下载AOSP源码</title>
      <link>http://devbins.github.io/post/aosp/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/aosp/</guid>
      <description>AOSP 介绍 AOSP 是 Android 开放源码项目，通俗点就是整个 Android 的源码。有了 AOSP 我们就可以在源码的层面去了解整个 Android 系统。甚至可以自己基于 AOSP 去定制自己系统，这也是众多</description>
    </item>
    
    <item>
      <title>在Emacs中用PlantUML画UML</title>
      <link>http://devbins.github.io/post/plantuml/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/plantuml/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;平时需要画 &lt;code&gt;UML&lt;/code&gt; 图，用的比较多的就是 &lt;a href=&#34;http://staruml.io/&#34;&gt;StarUML&lt;/a&gt; 、 &lt;code&gt;Visio&lt;/code&gt; 、 &lt;code&gt;Rational Rose&lt;/code&gt; 。其中 &lt;a href=&#34;http://staruml.io/&#34;&gt;StarUML&lt;/a&gt; 是跨平台的免费软件，相比其他的收费软件是个不错的选择。&lt;/p&gt;
&lt;p&gt;今天要介绍的是&lt;a href=&#34;http://plantuml.com/zh/index&#34;&gt;PlantUML&lt;/a&gt;它是一个开源的用文字来描述的工具，简单来说就是用文字去写出各种 &lt;code&gt;UML&lt;/code&gt; 图，而不是用鼠标去拖拽。上面介绍的工具都是通过鼠标去拖拽的方式去画出各种 &lt;code&gt;UML&lt;/code&gt; 图。可能由于是个开发的缘故，天生就喜欢纯文本的东西，解析起来方便，占用内存小，改起来也方便，只要一个文本编辑器就可以改。当然我使用的原因是可以在 &lt;code&gt;Emacs&lt;/code&gt; 中通过 &lt;code&gt;Org Mode&lt;/code&gt; 结合 &lt;code&gt;Org-Babel&lt;/code&gt; 使用，生成对应的 &lt;code&gt;UML&lt;/code&gt; 图，所见即所得。&lt;/p&gt;
&lt;p&gt;这里有一个&lt;a href=&#34;http://www.plantuml.com/plantuml/&#34;&gt;在线体验&lt;/a&gt;的网址，有兴趣可以点击链接，前去体验。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>拔智齿</title>
      <link>http://devbins.github.io/post/tooth/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/tooth/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by Luigi Liccardo on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;智齿简介&#34;&gt;智齿简介&lt;/h2&gt;
&lt;p&gt;引用一段&lt;a href=&#34;https://baike.baidu.com/item/%E6%99%BA%E6%85%A7%E9%BD%BF/9756141?fr=aladdin&#34;&gt;百度百科&lt;/a&gt;的介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;智齿也称智慧齿、是人类的第三磨牙，随着遗传基因的不同智齿一般会在 16-30 岁之间长出，也是人一生中最后长出的牙齿，所以它最靠近喉咙，因为此时期的人们心智比较成熟而得名。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>UML类图</title>
      <link>http://devbins.github.io/post/uml/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/uml/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;UML（Unified Modeling Language）统一建模语言，对于程序员来说接触比较多的就是类图了。在学习 &lt;code&gt;UML&lt;/code&gt; 的时候没有好好学，导致后面许多别人画的类图看不懂，一些优秀的资料也看不懂，看到有 &lt;code&gt;UML&lt;/code&gt; 的都会下意识的跳过，这样下去不行，所以回来学习 &lt;code&gt;UML&lt;/code&gt; 相关知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>http://devbins.github.io/post/dockerfile/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/dockerfile/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;之前总结过 Docker 的使用,讲解了 Docker 的安装、相关概念以及基本使用。里面介绍的都是如何使用别人制作好的镜像，显然是不能满足我们的需要。接下来就来讲讲私人订制自己的镜像。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>RxLifecycle 原理解析</title>
      <link>http://devbins.github.io/post/rxlifecycle/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/rxlifecycle/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;从名字中可以看出 &lt;code&gt;RxLifecycle&lt;/code&gt; 和生命周期有关。也的确如此， &lt;code&gt;RxLifecycle&lt;/code&gt; 通过监听生命周期的变化，来解决 &lt;code&gt;RxJava&lt;/code&gt; 内存泄漏的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 hugo 搭建网站</title>
      <link>http://devbins.github.io/post/hugo/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/hugo/</guid>
      <description>hugo 是一个静态网站生成器，通过 hugo 可以快速生成属于你的静态网站。 安装 hugo 1 brew install hugo 创建网站 1 hugo new site blog 选择主题 在Hugo Themes中选择一个喜欢的主</description>
    </item>
    
    <item>
      <title>Retrofit 源码解析</title>
      <link>http://devbins.github.io/post/retrofit/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/retrofit/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Retrofit 是 square 推出用来请求 RESTful 风格 API 的网络库，可以让开发人员快速开发 RESTful 风格的应用。&lt;/p&gt;
&lt;p&gt;本文基于 &lt;code&gt;retrofit2.5.0&lt;/code&gt; 进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>在 Emacs 中用 mu4e 来收邮件</title>
      <link>http://devbins.github.io/post/mu4e/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/mu4e/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用 Emacs 的人喜欢把所有的事情都使用 emacs 来管理，总是把有意思的事情集成进 Emacs。其中乐趣（痛苦）只有折腾过才能体会。&lt;/p&gt;
&lt;p&gt;最近想在 Linux 中收发邮件，网页版使用起来多有不便，于是想着用 Emacs 来收发邮件岂不是很有趣。&lt;/p&gt;
&lt;p&gt;在 Emacs 中折腾邮件也是一件很费力的事，看了好多文章有用 guns、mu4e、Wander Lust 的。试了一下 mu4e 比较容易上手，就决定是它了。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>在 Docker 中使用 nexus3 构建 Android 私有仓库</title>
      <link>http://devbins.github.io/post/nexus3/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/nexus3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在 Android 中使用第三库有两种方式，第一种是把 jar 文件放到 libs 目录下作为 library 引用，第二种需要开发者把编译好的 jar 包上传到类似 maven 这种中央仓库，然后在项目中添加依赖就可以了。&lt;/p&gt;
&lt;p&gt;使用 jcenter 来管理第三方库在升级版本时非常方便，只需要更改版本号就可以了。不然每次版本升级都需要到指定的地方下载下来，然后替换旧版本，这样就非常麻烦。但是 maven 是所有人员都可以访问的，有一些公司的项目是不能公开，所以需要我们搭建自己的 maven 仓库，这就是本文要讲的。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux 下 svn 使用</title>
      <link>http://devbins.github.io/post/linuxsvn/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/linuxsvn/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在上一篇文章中讲到了在 Linux 下搭建 SVN 服务器，其实在工作中我们用的比较多的还是代码管理，这篇文章就来聊一聊在 Linux 下用 svn 管理代码。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux 下 svn 服务搭建</title>
      <link>http://devbins.github.io/post/svnserve/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/svnserve/</guid>
      <description>&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt install subversion
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>在 Docker 中用 Jenkins 搭建 Android 自动化打包</title>
      <link>http://devbins.github.io/post/jenkins/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/jenkins/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Jenkins 是一个持续集成的工具，帮你构建和打包自动化，不用手动做这些操作。构建完成后可以帮你上传到第三方测试平台，或者做其他一些操作。例如：发送邮件通知测试人员可以开始测试了，邮件中包含下载地址，或者二维码。整个流程不需要手动管理，非常高效。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>ArchLinux 安装 UEFI &#43; GPT</title>
      <link>http://devbins.github.io/post/archlinux%E5%AE%89%E8%A3%85uefi/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/archlinux%E5%AE%89%E8%A3%85uefi/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;之前写过一篇 Arch Linux 安装的文章，不过那是使用 MBR 引导的，但是现在很多机器都已经使用上 UEFI 了，这里就是在 UEFI 上的实践。&lt;/p&gt;
&lt;p&gt;本篇文章只讲和 MBR 不一样的地方，不然文章会显得啰嗦很长。MBR 安装方式会在文末给出链接，两篇结合起来看会好点。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Arch Linux 安装</title>
      <link>http://devbins.github.io/post/archlinux/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/archlinux/</guid>
      <description>&lt;p&gt;今年开始我一直使用 &lt;code&gt;Manjaro&lt;/code&gt; ，这是一个基于 &lt;code&gt;Arch&lt;/code&gt; 的发行版，有较友好的安装界面。省去了不少折腾，但是这也带来了一些问题，你不知道有些东西是没有必要的，驱动怎么安装，分区怎么分。从头开始会让你更了解 &lt;code&gt;Linux&lt;/code&gt; ，虽然这么说，但我还是没有选择折腾，直到最近在升级的时候有线网卡找不到了，一下子和全球的人失去了联系，进入了孤岛，这是多么痛苦的一件事。于是下定决心，折腾一下。&lt;/p&gt;
&lt;p&gt;本文不适合一点 Linux 都不懂的小白，至少你有使用过，懂得基本命令。如果你是新手 &lt;code&gt;Manjaro&lt;/code&gt; 或者 &lt;code&gt;Ubuntu&lt;/code&gt; 可能会适合你。&lt;/p&gt;
&lt;p&gt;本文教程需要你准备一个额外的 4G U 盘，制作环境是 Linux。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单例模式的多种写法</title>
      <link>http://devbins.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;单例模式介绍&#34;&gt;单例模式介绍&lt;/h2&gt;
&lt;p&gt;单例模式算是平常用的比较多的，而且也比较简单的模式之一。单例模式的作用就是保证在程序中只有一个实例存在。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Appium 做测试</title>
      <link>http://devbins.github.io/post/appium/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/appium/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文使用 Windows7 64bit 操作系统。如果你的操作系统不是 64 位的，不可直接使用下文中提供的地址。但是文末给出了各个软件对应操的作系统下载链接，请根据自己的系统自行选择对应的下载，以免误伤自己，毕竟折腾很容易受伤。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>小米路由器刷 Padavan</title>
      <link>http://devbins.github.io/post/miwifipadavan/</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/miwifipadavan/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;半个月前，我把小米路由器刷成了 openwrt，使用之后发现很难受。很多软件没办法直接下载，更新源也更了半天更不下来。里面的功能配置起来有些复杂不能开箱即用，用来折腾倒是不错，但是一款路由器是可是互联网的通道，随便瞎搞没了网络，就不好玩了。在折腾的过程中发现了 Padavan。刷上用了一段时间还不错，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>小米路由器刷 openwrt</title>
      <link>http://devbins.github.io/post/miwifi/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/miwifi/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;我买过两个小米路由器，一个是小米路由器 mini、另一个是小米路由器 R2D 带硬盘的。mini 一直放在家里用，没怎么去折腾。后来买 R2D 是因为电脑的空间剩余不多，买个带硬盘的，把一部分文件放到路由器上。买来后就不断在小米论坛上逛，看看有没有什么好玩的，后来发现了 openwrt。这就开启了折腾之旅，有搭建网站的、下载的、代理的……各种，这就是一台 Linux 电脑啊，很是兴奋也想搞个自己的。&lt;/p&gt;
&lt;p&gt;开始在论坛上找各种教程，发现 R2D 的 opkg 居然不能用，试了各种办法都效果不好，最糟糕的是 R2D 居然不能装 openwrt，这就没得玩了。R2D 也就一直充当着一个硬盘的作用,偶尔也折腾一下，看看论坛有没有出能装 openwrt 的教程，等的我心都凉了，以后买路由器想折腾还是不要买小米的。
今年过年回家发现 WiFi 连不上了，跑到放路由器的地方一看，多出了一个白色的家伙，看着也像路由器，研究了一下这家伙确实是路由器，而且还是装宽带送的，这下好了，mini 腾出来了，也就有了下文。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Manjaro 的使用</title>
      <link>http://devbins.github.io/post/manjaro/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/manjaro/</guid>
      <description>&lt;h2 id=&#34;manjaro-使用的原因&#34;&gt;Manjaro 使用的原因&lt;/h2&gt;
&lt;p&gt;最近把操作系统换成了 Linux，Linux 发行版众多，选择一个作为日常使用非常纠结。之前折腾过 RHEL 系、openSUSE、都非常不错，不过装 QQ 等国产软件还是比较麻烦，偶然在&lt;a href=&#34;https://emacs-china.org/&#34;&gt;emacs-china&lt;/a&gt;上看到有人推荐使用 Manjaro 于是我就抱着尝试的心态试试，发现还不错。在&lt;a href=&#34;https://distrowatch.com/table.php?distribution=manjaro&#34;&gt;distrowatch&lt;/a&gt;上排名排在第二，人气很高，这就让我放心了，那么多人使用解决问题也会比较方便。真正让我选择它的是在虚拟机上打开 Android Studio 速度比其他发行版快。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 SSH 登录服务器</title>
      <link>http://devbins.github.io/post/ssh/</link>
      <pubDate>Sat, 13 Jan 2018 11:30:51 +0800</pubDate>
      
      <guid>http://devbins.github.io/post/ssh/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;常常和服务器打交道的同志，最频繁的操作就是登陆服务器。每次登陆服务器都要输入密码特别的烦人。
有没有一种办法可以只输入一次密码，以后有都不用再输入密码的办法？如果有多个服务器怎么办？又要输密码吗？
其实我们常常使用 SSH 登录服务器，这个 SSH 就提供了这样的操作，不过需要配置。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Siri 帮我开灯</title>
      <link>http://devbins.github.io/post/siri%E5%B8%AE%E6%88%91%E5%BC%80%E7%81%AF/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/siri%E5%B8%AE%E6%88%91%E5%BC%80%E7%81%AF/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;苹果自从发布了 HomeKit，可以方便的把家里的智能设备连接在一起，结合 Siri 可以说说话就让家里的设备运转起来。但是只有苹果认证的设备才能用，没有认证的还是没有办法使用的。好在有&lt;a href=&#34;https://github.com/nfarina&#34;&gt;nfarina&lt;/a&gt;逆向了苹果的协议，做出了&lt;a href=&#34;https://github.com/nfarina/homebridge&#34;&gt;homebridge&lt;/a&gt;才使得众多智能设备接入 HomeKit 成为现实。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>2017 的我</title>
      <link>http://devbins.github.io/post/2017%E7%9A%84%E6%88%91/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/2017%E7%9A%84%E6%88%91/</guid>
      <description>&lt;h2 id=&#34;这一年的变化&#34;&gt;这一年的变化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;比较明显的肚子有些变大，估计也重了不少，总不至于太瘦了。&lt;/li&gt;
&lt;li&gt;买了一些硬件，做了一些好玩的东西。&lt;/li&gt;
&lt;li&gt;工作之余简单学了一下 Vue、小程序开发，了解了一点人工智能，毕竟这么火不可能忽视。&lt;/li&gt;
&lt;li&gt;看了一些书。&lt;/li&gt;
&lt;li&gt;从 Vim 转到了 Emacs，也没有完全放弃 Vim，只是可能我以后绝大多数都会使用 Emacs。&lt;/li&gt;
&lt;li&gt;写了几篇博客。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>使用 Git 管理 SVN 项目</title>
      <link>http://devbins.github.io/post/git%E7%AE%A1%E7%90%86svn/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/git%E7%AE%A1%E7%90%86svn/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Git 中有一个神奇的功能，他可以让你用 Git 来管理 SVN。两个之间互不冲突，对于喜欢使用 Git 的同志，这是一个非常不错的选择。自从有了它妈妈再也不用担心 SVN 不好用了。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Vue 使用总结</title>
      <link>http://devbins.github.io/post/vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文基于 Vue 2.0,聊一聊 Vue 的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;简单介绍&#34;&gt;简单介绍&lt;/h2&gt;
&lt;p&gt;Vue.js (读音 /vjuː/，类似于 view) 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。&lt;/p&gt;
&lt;p&gt;我个人觉得有基础的人学习 Vue 上手是比较快的，使用也是简单，并且还有完整的生态并且社区活跃，相信学习 Vue 会是一件有价值的事。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 之 urllib</title>
      <link>http://devbins.github.io/post/python%E4%B9%8Burllib/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/python%E4%B9%8Burllib/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;之前用 Python 写的一个爬虫，现在用 Emacs 打开，提示找不到 &lt;code&gt;urllib.urlopen&lt;/code&gt; 这个函数。调试了半天，就是提示找不到这个函数，但是这个爬虫却能正确执行。于是我打开&lt;a href=&#34;https://kapeli.com/dash&#34;&gt;Dash&lt;/a&gt;查看其 API，发现 API 中有这个函数，但是却不是使用 &lt;code&gt;urllib.urlopen&lt;/code&gt; 来调用。而是变成了 &lt;code&gt;urllib.request.urlopen&lt;/code&gt; ，仔细一看当前查看的是 Python3 的版本，看来是 Python 版本的锅。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>ReactNative 入门</title>
      <link>http://devbins.github.io/post/reactnative%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/reactnative%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;ReactNative 在本文使用 RN 代替，代码使用 ES6 语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;开发环境搭建&#34;&gt;开发环境搭建&lt;/h2&gt;
&lt;h3 id=&#34;node-的安装&#34;&gt;Node 的安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>openSUSE 下安装 Parallels Tools</title>
      <link>http://devbins.github.io/post/opensuse/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/opensuse/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Parallels Desktop 是 macOS 上一款优秀的虚拟机软件，支持各种操作系统。然而想要在其上面愉快的使用桌面操作系统，还需要在虚拟机上安装 Parallels Tools 这个工具。在 Windows 上和 Ubuntu 以及 Centos 上安装还是非常简单，然而我在 openSUSE 上尝试却失败了，寻找良久才找到解决方法。遂以此文纪念我踩过的坑，以便给后人提供参考，而不会错过一些美好的事情。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Tmux</title>
      <link>http://devbins.github.io/post/tmux/</link>
      <pubDate>Sun, 18 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/tmux/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;做开发经常需要在各种环境中切来切去，回来的时候环境已经变了。Tmux 可以创建多个会话在不同环境中切换，回来的时候还是那个她，熟悉的味道。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>树莓派入门</title>
      <link>http://devbins.github.io/post/raspberry/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/raspberry/</guid>
      <description>&lt;h2 id=&#34;树莓派简单介绍&#34;&gt;树莓派简单介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Raspberry Pi(中文名为“树莓派”,简写为 RPi，(或者 RasPi / RPI)是为学生计算机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于 Linux。—— 来自百度百科的介绍&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Docker 使用</title>
      <link>http://devbins.github.io/post/docker%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/docker%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;docker-简介&#34;&gt;Docker 简介&lt;/h2&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎。可以看成是一个特殊的环境，隔离了宿主机（电脑）和容器。做开发的时候通常会碰到在自己的电脑上没问题，放到服务器或者别人的电脑上就出问题了，通常我们会认为是环境不一致导致的，调试起来非常耗时费力。有了 Docker 这些问题迎刃而解。&lt;/p&gt;
&lt;p&gt;经常在 Linux 上做测试的人员，做完测试就不用了。在过去我们会使用虚拟机，这样做不但占据者比较大的磁盘空间，而且运行启动耗时较长，性能不高。但是用 Docker 却可以随时随地启动一个 Linux 的容器，用完就可以删除，下次要用在重新开启一个新的，速度非常快。Docker 比虚拟机来的轻巧，开启和关闭非常迅速，占用的资源少。既然 Docker 有那么多的好处，没有理由不去调戏它。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Mac 终端中使用代理</title>
      <link>http://devbins.github.io/post/mac%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/mac%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</guid>
      <description>作为一个程序员，天天和终端打交道。可是在 Mac 终端下使用 brew 安装软件却十分慢，即便你使用 ShadowSocks 配置了全局代理，却发现这么做依然没有效果，下载还是龟速。</description>
    </item>
    
    <item>
      <title>Android 网络服务发现（NSD）</title>
      <link>http://devbins.github.io/post/nsd/</link>
      <pubDate>Mon, 03 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/nsd/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这些日子碰到这样一个需求，需要在局域网中发现我们创建的某个特定设备，并连上互相通信。本以为要去遍历整个局域网，后来查阅相关资料后发现 Android 为我们提供了网络服务发现（Network Service Discovery）简称 NSD，就是本文要讲的东西了。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Go 入门</title>
      <link>http://devbins.github.io/post/go%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/go%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h2 id=&#34;go-语言简介&#34;&gt;Go 语言简介&lt;/h2&gt;
&lt;p&gt;Go 是一门开源，在语言层上支持并发，带垃圾回收的新型编译型语言。具有动态语言的开发效率，静态语言的安全性。Go 语言是 Google 开发的，Go 语言的主要作者都是牛逼到不行的人物。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;肯·汤普逊(Ken Thompson):C 语言的设计者，Unix 操作系统的创建者，并于 1983 年获得图灵奖。&lt;/li&gt;
&lt;li&gt;罗布·派克:Unix 小组的成员，《Unix 编程环境》作者之一。&lt;/li&gt;
&lt;li&gt;罗伯特·格里泽默(Robert Griesemer)参与 Java 的 HotSpot 编译器和 Chrome 浏览器的 JavaScript 引擎 V8 的制作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有这么多牛逼哄哄的人物镇楼，Go 语言的表现注定不会平庸。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hexo 搭建博客</title>
      <link>http://devbins.github.io/post/hexo/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://devbins.github.io/post/hexo/</guid>
      <description>&lt;h2 id=&#34;安装-hexo-前的准备&#34;&gt;安装 Hexo 前的准备&lt;/h2&gt;
&lt;h3 id=&#34;node-dot-js-的安装&#34;&gt;Node.js 的安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;安装-git-当然你还得有-github-账号&#34;&gt;安装 Git，当然你还得有 GitHub 账号&lt;/h3&gt;
&lt;p&gt;安装过 Xcode 的可以跳过这一步，Xcode 自带 Git。
没安装的可以安装 Xcode 也可以使用下面的命令安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
